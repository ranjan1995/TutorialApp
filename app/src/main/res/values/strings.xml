<resources>
    <string name="app_name" translatable="false">Tutorial Application</string>
    <string name="navigation_drawer_open">Open navigation drawer</string>
    <string name="navigation_drawer_close">Close navigation drawer</string>
    <string name="nav_header_title">Android Studio</string>
    <string name="nav_header_subtitle">android.studio@android.com</string>
    <string name="nav_header_desc">Navigation header</string>
    <string name="action_settings">Settings</string>

    <string name="menu_home">Home</string>
    <string name="menu_gallery">Gallery</string>
    <string name="menu_slideshow">Slideshow</string>
    <string name="menu_tools">Tools</string>
    <string name="menu_share">Share</string>
    <string name="menu_send">Send</string>

    <string name="java_home"><![CDATA[
        <html>
                <body bgcolor="#E6E6FA">
                    <p>Java is a high-level programming language originally developed by Sun Microsystems and released in 1995. Java runs on a variety of platforms, such as Windows, Mac OS, and the various versions of UNIX. This tutorial gives a complete understanding of Java. This reference will take you through simple and practical approaches while learning Java Programming language.</p>
                    <h1>Audience</h1>
                    <p>This tutorial has been prepared for the beginners to help them understand the basic to advanced concepts related to Java Programming language.</p>
                    <h1>Prerequisites</h1>
                    <p>Before you start practicing various types of examples given in this reference, we assume that you are already aware about computer programs and computer programming languages.</p>
                </body>
         </html>
    ]]></string>

    <string name="Java_Overview" translatable="false"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Java programming language was originally developed by Sun Microsystems which was initiated by James Gosling and released in 1995 as core component of Sun Microsystems\' Java platform (Java 1.0 [J2SE]).</p>
                <p>The latest release of the Java Standard Edition is Java SE 8. With the advancement of Java and its widespread popularity, multiple configurations were built to suit various types of platforms. For example: J2EE for Enterprise Applications, J2ME for Mobile Applications.</p>
                <p>The new J2 versions were renamed as Java SE, Java EE, and Java ME respectively. Java is guaranteed to be <b>Write Once, Run Anywhere.</b></p>
                <p>Java is &minus;</p>
                <ul>
                   <li>
                      <p><b>Object Oriented</b> &minus; In Java, everything is an Object. Java can be easily extended since it is based on the Object model.</p>
                   </li>
                   <li>
                      <p><b>Platform Independent</b> &minus; Unlike many other programming languages including C and C&plus;&plus;, when Java is compiled, it is not compiled into platform specific machine, rather into platform independent byte code. This byte code is distributed over the web and interpreted by the Virtual Machine (JVM) on whichever platform it is being run on.</p>
                   </li>
                   <li>
                      <p><b>Simple</b> &minus; Java is designed to be easy to learn. If you understand the basic concept of OOP Java, it would be easy to master.</p>
                   </li>
                   <li>
                      <p><b>Secure</b> &minus; With Java\'s secure feature it enables to develop virus-free, tamper-free systems. Authentication techniques are based on public-key encryption.</p>
                   </li>
                   <li>
                      <p><b>Architecture-neutral</b> &minus; Java compiler generates an architecture-neutral object file format, which makes the compiled code executable on many processors, with the presence of Java runtime system.</p>
                   </li>
                   <li>
                      <p><b>Portable</b> &minus; Being architecture-neutral and having no implementation dependent aspects of the specification makes Java portable. Compiler in Java is written in ANSI C with a clean portability boundary, which is a POSIX subset.</p>
                   </li>
                   <li>
                      <p><b>Robust</b> &minus; Java makes an effort to eliminate error prone situations by emphasizing mainly on compile time error checking and runtime checking.</p>
                   </li>
                   <li>
                      <p><b>Multithreaded</b> &minus; With Java\'s multithreaded feature it is possible to write programs that can perform many tasks simultaneously. This design feature allows the developers to construct interactive applications that can run smoothly.</p>
                   </li>
                   <li>
                      <p><b>Interpreted</b> &minus; Java byte code is translated on the fly to native machine instructions and is not stored anywhere. The development process is more rapid and analytical since the linking is an incremental and light-weight process.</p>
                   </li>
                   <li>
                      <p><b>High Performance</b> &minus; With the use of Just-In-Time compilers, Java enables high performance.</p>
                   </li>
                   <li>
                      <p><b>Distributed</b> &minus; Java is designed for the distributed environment of the internet.</p>
                   </li>
                   <li>
                      <p><b>Dynamic</b> &minus; Java is considered to be more dynamic than C or C&plus;&plus; since it is designed to adapt to an evolving environment. Java programs can carry extensive amount of run-time information that can be used to verify and resolve accesses to objects on run-time.</p>
                   </li>
                </ul>
                <h2>History of Java</h2>
                <p>James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called ‘Oak’ after an oak tree that stood outside Gosling\'s office, also went by the name ‘Green’ and ended up later being renamed as Java, from a list of random words.</p>
                <p>Sun released the first public implementation as Java 1.0 in 1995. It promised <b>Write Once, Run Anywhere</b> (WORA), providing no-cost run-times on popular platforms.</p>
                <p>On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).</p>
                <p>On 8 May, 2007, Sun finished the process, making all of Java\'s core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright.</p>
                <h2>Tools You Will Need</h2>
                <p>For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended).</p>
                <p>You will also need the following softwares &minus;</p>
                <ul>
                   <li>Linux 7.1 or Windows xp/7/8 operating system</li>
                   <li>Java JDK 8</li>
                   <li>Microsoft Notepad or any other text editor</li>
                </ul>
                <p>This tutorial will provide the necessary skills to create GUI, networking, and web applications using Java.</p>
                <h2>What is Next?</h2>
                <p>The next chapter will guide you to how you can obtain Java and its documentation. Finally, it instructs you on how to install Java and prepare an environment to develop Java applications.</p>
            </body>
         </html>
    ]]></string>

    <string name="Java_Environment_Setup"><![CDATA[
        <html>
            <body>
                <p>In this chapter, we will discuss on the different aspects of setting up a congenial environment for Java.</p>
                <h2>Local Environment Setup</h2>
                <p>If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Following are the steps to set up the environment.</p>
                <p>Java SE is freely available from the link <a rel="nofollow" target="_blank" href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">Download Java</a>. You can download a version based on your operating system.</p>
                <p>Follow the instructions to download Java and run the <b>.exe</b> to install Java on your machine. Once you installed Java on your machine, you will need to set environment variables to point to correct installation directories −</p>
                <h3>Setting Up the Path for Windows</h3>
                <p>Assuming you have installed Java in <i>c:\Program Files\java\jdk</i> directory −</p>
                <ul>
                    <li><p>Right-click on \'My Computer\' and select \'Properties\'.</p></li>
                    <li><p>Click the \'Environment variables\' button under the \'Advanced\' tab.</p></li>
                    <li><p>Now, alter the \'Path\' variable so that it also contains the path to the Java executable. Example, if the path is currently set to \'C:\WINDOWS\SYSTEM32\', then change your path to read \'C:\WINDOWS\SYSTEM32;c:\Program Files\java\jdk\bin\'.</p></li>
                </ul>
                <h3>Setting Up the Path for Linux, UNIX, Solaris, FreeBSD</h3>
                <p>Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation, if you have trouble doing this.</p>
                <p>Example, if you use <i>bash</i> as your shell, then you would add the following line to the end of your '.bashrc: export PATH = /path/to/java:$PATH'</p>
                <h2>Popular Java Editors</h2>
                <p>To write your Java programs, you will need a text editor. There are even more sophisticated IDEs available in the market. But for now, you can consider one of the following &minus;</p>
                <ul class="list">
                <li><p><b>Notepad</b> &minus; On Windows machine, you can use any simple text editor like Notepad (Recommended for this tutorial), TextPad.</p></li>
                <li><p><b>Netbeans</b> &minus; A Java IDE that is open-source and free which can be downloaded from <a  target="_blank" rel="nofollow" href="https://www.netbeans.org/index.html">https://www.netbeans.org/index.html</a>.</p></li>
                <li><p><b>Eclipse</b> &minus; A Java IDE developed by the eclipse open-source community and can be downloaded from <a target="_blank" rel="nofollow" href="https://www.eclipse.org/">https://www.eclipse.org/</a>.</p></li>
                </ul>
                <h2>What is Next?</h2>
                <p>Next chapter will teach you how to write and run your first Java program and some of the important basic syntaxes in Java needed for developing applications.</p>

            </body>
        </html>
    ]]></string>

    <string name="Java_Basic_Syntax"><![CDATA[
        <!DOCTYPE html>
        <html>
                <body bgcolor="#E6E6FA">
                    <p>When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other\'s methods. Let us now briefly look into what do class, object, methods, and instance variables mean.</p>
                    <ul class="list">
                       <li>
                          <p><b>Object</b> &minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behavior such as wagging their tail, barking, eating. An object is an instance of a class.</p>
                       </li>
                       <li>
                          <p><b>Class</b> &minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type supports.</p>
                       </li>
                       <li>
                          <p><b>Methods</b> &minus; A method is basically a behavior. A class can contain many methods. It is in methods where the logics are written, data is manipulated and all the actions are executed.</p>
                       </li>
                       <li>
                          <p><b>Instance Variables</b> &minus; Each object has its unique set of instance variables. An object\'s state is created by the values assigned to these instance variables.</p>
                       </li>
                    </ul>
                    <h2>First Java Program</h2>
                    <p>Let us look at a simple code that will print the words <b><i>Hello World</i></b>.</p>
                    <h3>Example</h3>
                    <pre >
                    public class MyFirstJavaProgram {

                       /* This is my first java program.
                        * This will print \'Hello World\' as the output
                        */
                       public static void main(String []args) {
                          System.out.println("Hello World"); // prints Hello World
                       }
                    }
                    </pre>
                    <p>Let\'s look at how to save the file, compile, and run the program. Please follow the subsequent steps &minus;</p>
                    <ul class="list">
                       <li>
                          <p>Open notepad and add the code as above.</p>
                       </li>
                       <li>
                          <p>Save the file as: MyFirstJavaProgram.java.</p>
                       </li>
                       <li>
                          <p>Open a command prompt window and go to the directory where you saved the 	class. Assume it\'s C:\.</p>
                       </li>
                       <li>
                          <p>Type \'javac MyFirstJavaProgram.java\' and press enter to compile your code. If there are no errors in your code, the command prompt will take you to the next line (Assumption : The path variable is set).</p>
                       </li>
                       <li>
                          <p>Now, type \' java MyFirstJavaProgram \' to run your program.</p>
                       </li>
                       <li>
                          <p>You will be able to see \' Hello World \' printed on the window.</p>
                       </li>
                    </ul>
                    <h3>Output</h3>
                    <pre class="result notranslate">
                    C:\&gt; javac MyFirstJavaProgram.java
                    C:\&gt; java MyFirstJavaProgram
                    Hello World
                    </pre>
                    <h2>Basic Syntax</h2>
                    <p>About Java programs, it is very important to keep in mind the following points.</p>
                    <ul class="list">
                       <li>
                          <p><b>Case Sensitivity</b> &minus; Java is case sensitive, which means identifier <b>Hello</b> and <b>hello</b> would have different meaning in Java.</p>
                       </li>
                       <li>
                          <p><b>Class Names</b> &minus; For all class names the first letter should be in Upper Case. If several words are used to form a name of the class, each inner word\'s first letter should be in Upper Case.</p>
                          <p><b>Example:</b> <i>class MyFirstJavaClass</i></p>
                       </li>
                       <li>
                          <p><b>Method Names</b> &minus; All method names should start with a Lower Case letter. If several words are  used to form the name of the method, then each inner word\'s first letter should be in Upper Case.</p>
                          <p><b>Example:</b> <i>public void myMethodName()</i></p>
                       </li>
                       <li>
                          <p><b>Program File Name</b> &minus; Name of the program file should exactly match the class name.</p>
                          <p>When saving the file, you should save it using the class name (Remember Java is case sensitive) and append \'.java\' to the end of the name (if the file name and the class name do not match, your program will not compile).</p>
                          <p>But please make a note that in case  you do not have a public class present in the file then file name can be different than class name.  It is also not mandatory to have a public class in the file.</p>
                          <p><b>Example:</b> Assume \'MyFirstJavaProgram\' is the class name. Then the file should be saved as <i>\'MyFirstJavaProgram.java\'</i></p>
                       </li>
                       <li>
                          <p><b>public static void main(String args[])</b> &minus; Java program processing starts from the main() method which is a mandatory part of every Java program.</p>
                       </li>
                    </ul>
                    <h2>Java Identifiers</h2>
                    <p>All Java components require names. Names used for classes, variables, and methods are called <b>identifiers</b>.</p>
                    <p>In Java, there are several points to remember about identifiers. They are as follows &minus;</p>
                    <ul class="list">
                       <li>
                          <p>All identifiers should begin with a letter (A to Z or a to z), currency character ($) or an underscore (_).</p>
                       </li>
                       <li>
                          <p>After the first character, identifiers can have any combination of characters.</p>
                       </li>
                       <li>
                          <p>A key word cannot be used as an identifier.</p>
                       </li>
                       <li>
                          <p>Most importantly, identifiers are case sensitive.</p>
                       </li>
                       <li>
                          <p>Examples of legal identifiers: age, $salary, _value, __1_value.</p>
                       </li>
                       <li>
                          <p>Examples of illegal identifiers: 123abc, -salary.</p>
                       </li>
                    </ul>
                    <h2>Java Modifiers</h2>
                    <p>Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers &minus;</p>
                    <ul class="list">
                       <li>
                          <p><b>Access Modifiers</b> &minus; default, public , protected, private</p>
                       </li>
                       <li>
                          <p><b>Non-access Modifiers</b> &minus; final, abstract, strictfp</p>
                       </li>
                    </ul>
                    <p>We will be looking into more details about modifiers in the next section.</p>
                    <h2>Java Variables</h2>
                    <p>Following are the types of variables in Java &minus;</p>
                    <ul class="list">
                       <li>Local Variables</li>
                       <li>Class Variables (Static Variables)</li>
                       <li>Instance Variables (Non-static Variables)</li>
                    </ul>
                    <h2>Java Arrays</h2>
                    <p>Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters.</p>
                    <h2>Java Enums</h2>
                    <p>Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.</p>
                    <p>With the use of enums it is possible to reduce the number of bugs in your code.</p>
                    <p>For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.</p>
                    <h3>Example</h3>

                    <pre>
                    class FreshJuice {
                       enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }
                       FreshJuiceSize size;
                    }

                    public class FreshJuiceTest {

                       public static void main(String args[]) {
                          FreshJuice juice = new FreshJuice();
                          juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;
                          System.out.println("Size: " + juice.size);
                       }
                    }
                    </pre>
                    <p>The above example will produce the following result &minus;</p>
                    <h3>Output</h3>
                    <pre class="result notranslate">
                    Size: MEDIUM
                    </pre>
                    <p><b>Note</b> &minus; Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well.</p>
                    <h2>Java Keywords</h2>
                    <p>The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names.</p>
                    <table >
                       <tr>
                          <td>abstract</td>
                          <td>assert</td>
                          <td>boolean</td>
                          <td>break</td>
                       </tr>
                       <tr>
                          <td>byte</td>
                          <td>case</td>
                          <td>catch</td>
                          <td>char</td>
                       </tr>
                       <tr>
                          <td>class</td>
                          <td>const</td>
                          <td>continue</td>
                          <td>default</td>
                       </tr>
                       <tr>
                          <td>do</td>
                          <td>double</td>
                          <td>else</td>
                          <td>enum</td>
                       </tr>
                       <tr>
                          <td>extends</td>
                          <td>final</td>
                          <td>finally</td>
                          <td>float</td>
                       </tr>
                       <tr>
                          <td>for</td>
                          <td>goto</td>
                          <td>if</td>
                          <td>implements</td>
                       </tr>
                       <tr>
                          <td>import</td>
                          <td>instanceof</td>
                          <td>int</td>
                          <td>interface</td>
                       </tr>
                       <tr>
                          <td>long</td>
                          <td>native</td>
                          <td>new</td>
                          <td>package</td>
                       </tr>
                       <tr>
                          <td>private</td>
                          <td>protected</td>
                          <td>public</td>
                          <td>return</td>
                       </tr>
                       <tr>
                          <td>short</td>
                          <td>static</td>
                          <td>strictfp</td>
                          <td>super</td>
                       </tr>
                       <tr>
                          <td>switch</td>
                          <td>synchronized</td>
                          <td>this</td>
                          <td>throw</td>
                       </tr>
                       <tr>
                          <td>throws</td>
                          <td>transient</td>
                          <td>try</td>
                          <td>void</td>
                       </tr>
                       <tr>
                          <td>volatile</td>
                          <td>while</td>
                          <td></td>
                          <td></td>
                       </tr>
                    </table>
                    <h2>Comments in Java</h2>
                    <p>Java supports single-line and multi-line comments very similar to C and C&plus;&plus;. All characters available inside any comment are ignored by Java compiler.</p>
                    <h3>Example</h3>

                    <div align="justify">
                        <font color="blue">
                            public class MyFirstJavaProgram {<br>
                               <br>
                               /* This is my first java program.<br>
                                * This will print 'Hello World' as the output<br>
                                * This is an example of multi-line comments.<br>
                                */<br>
                                <br>
                               public static void main(String []args) {<br>
                                  // This is an example of single line comment<br>
                                  /* This is also an example of single line comment. */<br>
                                  System.out.println("Hello World");<br>
                               }<br>
                            }<br>
                        </font>
                    </div>
                    <h3>Output</h3>
                    <pre class="result notranslate">
                    Hello World
                    </pre>
                    <h2>Using Blank Lines</h2>
                    <p>A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it.</p>
                    <h2>Inheritance</h2>
                    <p>In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.</p>
                    <p>This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the <b>superclass</b> and the derived class is called the <b>subclass</b>.</p>
                    <h2>Interfaces</h2>
                    <p>In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.</p>
                    <p>An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass.</p>
                    <h2>What is Next?</h2>
                    <p>The next section explains about Objects and classes in Java programming. At the end of the session, you will be able to get a clear picture as to what are objects and what are classes in Java.</p>
                </body>
         </html>
    ]]></string>

    <string name="java_object_classes"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts &minus;</p>
                <ol class="list">
                   <li>Polymorphism</li>
                   <li>Inheritance</li>
                   <li>Encapsulation</li>
                   <li>Abstraction</li>
                   <li>Classes</li>
                   <li>Objects</li>
                   <li>Instance</li>
                   <li>Method</li>
                   <li>Message Passing</li>
                </ol>
                <p>In this chapter, we will look into the concepts - Classes and Objects.</p>
                <ul class="list">
                   <li>
                      <p><b>Object</b> &minus; Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class.</p>
                   </li>
                   <li>
                      <p><b>Class</b> &minus; A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support.</p>
                   </li>
                </ul>
                <h2>Objects in Java</h2>
                <p>Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.</p>
                <p>If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.</p>
                <p>If you compare the software object with a real-world object, they have very similar characteristics.</p>
                <p>Software objects also have a state and a behavior. A software object\'s state is stored in fields and behavior is shown via methods.</p>
                <p>So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods.</p>
                <h2>Classes in Java</h2>
                <p>A class is a blueprint from which individual objects are created.</p>
                <p>Following is a sample of a class.</p>
                <h3>Example</h3>
                <pre >
                public class Dog {<br>
                   String breed;<br>
                   int age;<br>
                   String color;<br>
                <br>
                   void barking() {<br>
                   }<br>
                <br>
                   void hungry() {<br>
                   }<br>
                <br>
                   void sleeping() {<br>
                   }<br>
                }
                </pre>
                <p>A class can contain any of the following variable types.</p>
                <ul class="list">
                   <li>
                      <p><b>Local variables</b> &minus; Variables defined inside methods, constructors or blocks are called local variables. The variable will be declared and initialized within the method and the variable will be destroyed when the method has completed.</p>
                   </li>
                   <li>
                      <p><b>Instance variables</b> &minus; Instance variables are variables within a class but outside any method. These variables are initialized when the class is instantiated. Instance variables can be accessed from inside any method, constructor or blocks of that particular class.</p>
                   </li>
                   <li>
                      <p><b>Class variables</b> &minus; Class variables are variables declared within a class, outside any method, with the static keyword.</p>
                   </li>
                </ul>
                <p>A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.</p>
                <p>Following are some of the important topics that need to be discussed when looking into classes of the Java Language.</p>
                <h2>Constructors</h2>
                <p>When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.</p>
                <p>Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.</p>
                <p>Following is an example of a constructor &minus;</p>
                <h3>Example</h3>
                <pre >
                public class Puppy {<br>
                   public Puppy() {<br>
                   }<br>

                   public Puppy(String name) {<br>
                      // This constructor has one parameter, <i>name</i>.<br>
                   }<br>
                }<br>
                </pre>
                <p>Java also supports <a href="/java/java_using_singleton.htm">Singleton Classes</a> where you would be able to create only one instance of a class.</p>
                <p><b>Note</b> &minus; We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters.</p>
                <h2>Creating an Object</h2>
                <p>As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.</p>
                <p>There are three steps when creating an object from a class &minus;</p>
                <ul class="list">
                   <li>
                      <p><b>Declaration</b> &minus; A variable declaration with a variable name with an object type.</p>
                   </li>
                   <li>
                      <p><b>Instantiation</b> &minus; The \'new\' keyword is used to create the object.</p>
                   </li>
                   <li>
                      <p><b>Initialization</b> &minus; The \'new\' keyword is followed by a call to a constructor. This call initializes the new object.</p>
                   </li>
                </ul>
                <p>Following is an example of creating an object &minus;</p>
                <h3>Example</h3>
                <pre>
                public class Puppy {<br>
                   public Puppy(String name) {<br>
                      // This constructor has one parameter, <i>name</i>.<br>
                      System.out.println("Passed Name is :" + name );<br>
                   }<br>
                <br>
                   public static void main(String []args) {<br>
                      // Following statement would create an object myPuppy<br>
                      Puppy myPuppy = new Puppy( "tommy" );<br>
                   }<br>
                }<br>
                </pre>
                <p>If we compile and run the above program, then it will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Passed Name is :tommy
                </pre>
                <h2>Accessing Instance Variables and Methods</h2>
                <p>Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path &minus;</p>
                <pre class="result notranslate">
                /* First create an object */<br>
                ObjectReference = new Constructor();<br>

                /* Now call a variable as follows */<br>
                ObjectReference.variableName;<br>

                /* Now you can call a class method as follows */<br>
                ObjectReference.MethodName();<br>
                </pre>
                <h3>Example</h3>
                <p>This example explains how to access instance variables and methods of a class.</p>
                <pre >
                public class Puppy {<br>
                   int puppyAge;<br>
                <br>
                   public Puppy(String name) {<br>
                      // This constructor has one parameter, <i>name</i>.<br>
                      System.out.println("Name chosen is :" + name );<br>
                   }<br>
                <br>
                   public void setAge( int age ) {<br>
                      puppyAge = age;<br>
                   }<br>
                <br>
                   public int getAge( ) {<br>
                      System.out.println("Puppy\'s age is :" + puppyAge );<br>
                      return puppyAge;<br>
                   }<br>
                <br>
                   public static void main(String []args) {<br>
                      /* Object creation */<br>
                      Puppy myPuppy = new Puppy( "tommy" );<br>
                <br>
                      /* Call class method to set puppy\'s age */<br>
                      myPuppy.setAge( 2 );<br>
                <br>
                      /* Call another class method to get puppy\'s age */<br>
                      myPuppy.getAge( );<br>
                <br>
                      /* You can access instance variable as follows as well */<br>
                      System.out.println("Variable Value :" + myPuppy.puppyAge );<br>
                   }<br>
                }<br>
                </pre>
                <p>If we compile and run the above program, then it will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Name chosen is :tommy
                Puppy's age is :2
                Variable Value :2
                </pre>
                <h2>Source File Declaration Rules</h2>
                <p>As the last part of this section, let's now look into the source file declaration rules. These rules are essential when declaring classes, <i>import</i> statements and <i>package</i> statements in a source file.</p>
                <ul class="list">
                   <li>
                      <p>There can be only one public class per source file.</p>
                   </li>
                   <li>
                      <p>A source file can have multiple non-public classes.</p>
                   </li>
                   <li>
                      <p>The public class name should be the name of the source file as well which should be appended by <b>.java</b> at the end. For example: the class name is <i>public class Employee{}</i> then the source file should be as Employee.java.</p>
                   </li>
                   <li>
                      <p>If the class is defined inside a package, then the package statement should be the first statement in the source file.</p>
                   </li>
                   <li>
                      <p>If import statements are present, then they must be written between the package statement and the class declaration. If there are no package statements, then the import statement should be the first line in the source file.</p>
                   </li>
                   <li>
                      <p>Import and package statements will imply to all the classes present in the source file. It is not possible to declare different import and/or package statements to different classes in the source file.</p>
                   </li>
                </ul>
                <p>Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.</p>
                <p>Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes.</p>
                <h2>Java Package</h2>
                <p>In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier.</p>
                <h2>Import Statements</h2>
                <p>In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.</p>
                <p>For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io &minus;</p>
                <pre class="result notranslate">
                import java.io.*;
                </pre>
                <h2>A Simple Case Study</h2>
                <p>For our case study, we will be creating two classes. They are Employee and EmployeeTest.</p>
                <p>First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.</p>
                <p>The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.</p>
                <h3>Example</h3>
                <pre >
                <br>import java.io.*;
                <br>public class Employee {
                <br>
                   <br>String name;
                   <br>int age;
                   String designation;
                   <br>double salary;
                <br>
                   <br>// This is the constructor of the class Employee
                   <br>public Employee(String name) {
                   <br>   this.name = name;
                   <br>}
                <br>
                   <br>// Assign the age of the Employee  to the variable age.
                   <br>public void empAge(int empAge) {
                   <br>   age = empAge;
                   <br>}
                <br>
                   <br>/* Assign the designation to the variable designation.*/
                   <br>public void empDesignation(String empDesig) {
                   <br>   designation = empDesig;
                   <br>}
                <br>
                   <br>/* Assign the salary to the variable	salary.*/
                   <br>public void empSalary(double empSalary) {
                   <br>   salary = empSalary;
                   <br>}
                <br>
                   <br>/* Print the Employee details */
                   <br>public void printEmployee() {
                      <br>System.out.println("Name:"+ name );
                      <br>System.out.println("Age:" + age );
                      <br>System.out.println("Designation:" + designation );
                    <br>  System.out.println("Salary:" + salary);
                 <br>  }
                <br>}
                </pre>
                <p>As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.</p>
                <p>Following is the <i>EmployeeTest</i> class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.</p>
                <p>Save the following code in EmployeeTest.java file.</p>
                <pre >
                <br>import java.io.*;
                <br>public class EmployeeTest {
                <br>
                   <br>public static void main(String args[]) {
                   <br>   /* Create two objects using constructor */
                    <br>  Employee empOne = new Employee("James Smith");
                    <br>  Employee empTwo = new Employee("Mary Anne");
                <br>
                    <br>  // Invoking methods for each object created
                    <br>  empOne.empAge(26);
                    <br>  empOne.empDesignation("Senior Software Engineer");
                    <br>  empOne.empSalary(1000);
                    <br>  empOne.printEmployee();
                <br>
                    <br>  empTwo.empAge(21);
                    <br>  empTwo.empDesignation("Software Engineer");
                <br>		empTwo.empSalary(500);
                    <br>  empTwo.printEmployee();
                <br>   }
                <br>}
                </pre>
                <p>Now, compile both the classes and then run <i>EmployeeTest</i> to see the result as follows &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                C:\&gt; javac Employee.java
                C:\&gt; javac EmployeeTest.java
                C:\&gt; java EmployeeTest
                Name:James Smith<br>
                Age:26<br>
                Designation:Senior Software Engineer<br>
                Salary:1000.0<br>
                Name:Mary Anne<br>
                Age:21<br>
                Designation:Software Engineer<br>
                Salary:500.0<br>
                </pre>
                <h2>What is Next?</h2>
                <p>In the next session, we will discuss the basic data types in Java and how they can be used when developing Java applications.</p>
            </body>
        </html>
    ]]></string>

    <string name="java_constructors"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.</p>
                <p>Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other start-up procedures required to create a fully formed object.</p>
                <p>All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.</p>
                <h2>Syntax</h2>
                <p>Following is the syntax of a constructor &minus;</p>
                <div align="justify">
                        <font color="blue">
                        <br>class ClassName {
                           <br>ClassName() {
                           <br>}
                        <br>}
                        </font
                </div>
                <p>Java allows two types of constructors namely &minus;</p>
                <ul class="list">
                   <li><b>No argument Constructors</b></li>
                   <li></b>Parameterized Constructors</b></li>
                </ul>
                <h2>No argument Constructors</h2>
                <p>As the name specifies the no argument constructors of Java does not accept any parameters instead, using these constructors the instance variables of a method will be initialized with fixed values for all objects.</p>
                <h2>Example</h2>
                <div align="justify">
                     <font color="blue">
                        <br>Public class MyClass {
                           <br>Int num;
                          <br> <MyClass() {
                              <br>num = 100;
                          <br> }
                        <br>}
                    </font
                </div>
                <p>You would call constructor to initialize objects as follows</p>
                <div align="justify">
                    <font color="blue">
                    <br>public class ConsDemo {
                      <br> public static void main(String args[]) {
                       <br>   MyClass t1 = new MyClass();
                        <br>  MyClass t2 = new MyClass();
                         <br> System.out.println(t1.num + " " + t2.num);
                       <br>}
                   <br> }
                    </font
                </div>
                <p>This would produce the following result</p>
                <pre class="result notranslate">
                100 100
                </pre>
                <h2>Parameterized Constructors</h2>
                <p>Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor's name.</p>
                <h2>Example</h2>
                <p>Here is a simple example that uses a constructor &minus;</p>
                 <div align="justify">
                    <font color="blue">
                        <br>// A simple constructor.
                        <br>class MyClass {
                        <br>   int x;
                        <br>
                        <br>   // Following is the constructor
                        <br>   MyClass(int i ) {
                        <br>      x = i;
                        <br>   }
                        <br>}
                    </font
                </div>
                <p>You would call constructor to initialize objects as follows &minus;</p>
                <div align="justify">
                    <font color="blue">
                       <br> public class ConsDemo {
                          <br> public static void main(String args[]) {
                          <br>    MyClass t1 = new MyClass( 10 );
                          <br>    MyClass t2 = new MyClass( 20 );
                          <br>    System.out.println(t1.x + " " + t2.x);
                          <br> }
                        <br>}
                    </font
                </div>
                <p>This would produce the following result &minus;</p>
            </body>
        </html>
    ]]></string>

    <string name="java_basic_datatypes"><![CDATA[

         <html>
            <body>
                <p>Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in the memory.</p>
                <p>Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.</p>
                <p>There are two data types available in Java &minus;</p>
                <ul class="list">
                   <li>Primitive Data Types</li>
                   <li>Reference/Object Data Types</li>
                </ul>
                <h2>Primitive Data Types</h2>
                <p>There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail.</p>
                <h3>byte</h3>
                <ul class="list">
                   <li>
                      <p>Byte data type is an 8-bit signed two\'s complement integer</p>
                   </li>
                   <li>
                      <p>Minimum value is -128 (-2&#94;7)</p>
                   </li>
                   <li>
                      <p>Maximum value is 127 (inclusive)(2&#94;7 -1)</p>
                   </li>
                   <li>
                      <p>Default value is 0</p>
                   </li>
                   <li>
                      <p>Byte data type is used to save space in large arrays, mainly in place of integers, since a byte is four times smaller than an integer.</p>
                   </li>
                   <li>
                      <p>Example: byte a = 100, byte b = -50</p>
                   </li>
                </ul>
                <h3>short</h3>
                <ul class="list">
                   <li>
                      <p>Short data type is a 16-bit signed two\'s complement integer</p>
                   </li>
                   <li>
                      <p>Minimum value is -32,768 (-2&#94;15)</p>
                   </li>
                   <li>
                      <p>Maximum value is 32,767 (inclusive) (2&#94;15 -1)</p>
                   </li>
                   <li>
                      <p>Short data type can also be used to save memory as byte data type. A short is 2 times smaller than an integer</p>
                   </li>
                   <li>
                      <p>Default value is 0.</p>
                   </li>
                   <li>
                      <p>Example: short  s = 10000, short r = -20000</p>
                   </li>
                </ul>
                <h3>int</h3>
                <ul class="list">
                   <li>
                      <p>Int data type is a 32-bit signed two\'s complement integer.</p>
                   </li>
                   <li>
                      <p>Minimum value is - 2,147,483,648 (-2&#94;31)</p>
                   </li>
                   <li>
                      <p>Maximum value is 2,147,483,647(inclusive) (2&#94;31 -1)</p>
                   </li>
                   <li>
                      <p>Integer is generally used as the default data type for integral values unless there is a concern about memory.</p>
                   </li>
                   <li>
                      <p>The default value is 0</p>
                   </li>
                   <li>
                      <p>Example: int a = 100000, int b = -200000</p>
                   </li>
                </ul>
                <h3>long</h3>
                <ul class="list">
                   <li>Long data type is a 64-bit signed two\'s complement integer</li>
                   <li>Minimum value is -9,223,372,036,854,775,808(-2&#94;63)</li>
                   <li>Maximum value is 9,223,372,036,854,775,807 (inclusive)(2&#94;63 -1)</li>
                   <li>This type is used when a wider range than int is needed</li>
                   <li>Default value is 0L</li>
                   <li>Example: long a = 100000L, long b = -200000L</li>
                </ul>
                <h3>float</h3>
                <ul class="list">
                   <li>
                      <p>Float data type is a single-precision 32-bit IEEE 754 floating point</p>
                   </li>
                   <li>
                      <p>Float is mainly used to save memory in large arrays of floating point numbers</p>
                   </li>
                   <li>
                      <p>Default value is 0.0f</p>
                   </li>
                   <li>
                      <p>Float data type is never used for precise values such as currency</p>
                   </li>
                   <li>
                      <p>Example: float f1 = 234.5f</p>
                   </li>
                </ul>
                <h3>double</h3>
                <ul class="list">
                   <li>
                      <p>double data type is a double-precision 64-bit IEEE 754 floating point</p>
                   </li>
                   <li>
                      <p>This data type is generally used as the default data type for decimal values, generally the default choice</p>
                   </li>
                   <li>
                      <p>Double data type should never be used for precise values such as currency</p>
                   </li>
                   <li>
                      <p>Default value is 0.0d</p>
                   </li>
                   <li>
                      <p>Example: double d1 = 123.4</p>
                   </li>
                </ul>
                <h3>char</h3>
                <ul class="list">
                   <li>char data type is a single 16-bit Unicode character</li>
                   <li>Minimum value is '\u0000' (or 0)</li>
                   <li>Maximum value is  '\uFFFF' (or 65,535 inclusive)</li>
                   <li>Char data type is used to store any character</li>
                   <li>Example: char letterA = 'A'</li>
                </ul>
                <h3>boolean</h3>
                <ul class="list">
                   <li>boolean data type represents one bit of information</li>
                   <li>There are only two possible values: true and false</li>
                   <li>This data type is used for simple flags that track true/false conditions</li>
                   <li>Default value is false</li>
                   <li>Example: boolean one = true</li>
                </ul>
                <h2>Reference Datatypes</h2>
                <ul class="list">
                   <li>
                      <p>Reference variables are created using defined constructors of the classes. They are used to access objects. These variables are declared to be of a specific type that cannot be changed. For example, Employee, Puppy, etc.</p>
                   </li>
                   <li>
                      <p>Class objects and various type of array variables come under reference datatype.</p>
                   </li>
                   <li>
                      <p>Default value of any reference variable is null.</p>
                   </li>
                   <li>
                      <p>A reference variable can be used to refer any object of the declared type or any compatible type.</p>
                   </li>
                   <li>
                      <p>Example: <font color="#0000FF">Animal animal = new Animal("giraffe");</font></p>
                   </li>
                </ul>
                <h2>Java Literals</h2>
                <p>A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.</p>
                <p>Literals can be assigned to any primitive type variable. For example &minus;</p>
                <pre >
                <br>byte a = 68;
                <br>char a = 'A';
                </pre>
                <p>byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.</p>
                <p>Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example &minus;</p>
                <pre >
                <br>int decimal = 100;
                <br>int octal = 0144;
                <br>int hexa =  0x64;
                </pre>

                <p>String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are &minus;</p>
                <h3>Example</h3>
                <pre >
                <br>"Hello World"
                <br>"two\nlines"
                <br>"\"This is in quotes\""
                </pre>
                <p>String and char types of literals can contain any Unicode characters. For example &minus;</p>
                <pre >
                char a = '\u0001';
                <br>String a = "\u0001";
                </pre>
                <p>Java language supports few special escape sequences for String and char literals as well. They are &minus;</p>

                <table border="1">
                   <thead>
                   <tr>
                      <th><center>Notation</center></th>
                      <th><center>Character represented</center></th>
                   </tr>
                   </thead>
                   <tbody align="center">
                   <tr>
                      <td>\n</td>
                      <td>Newline (0x0a)</td>
                   </tr>
                   <tr>
                      <td>\r</td>
                      <td>Carriage return (0x0d)</td>
                   </tr>
                   <tr>
                      <td>\f</td>
                      <td>Formfeed (0x0c)</td>
                   </tr>
                   <tr>
                      <td>\b</td>
                      <td>Backspace (0x08)</td>
                   </tr>
                   <tr>
                      <td>\s</td>
                      <td>Space (0x20)</td>
                   </tr>
                   <tr>
                      <td>\t</td>
                      <td>tab</td>
                   </tr>
                   <tr>
                      <td>\" </td>
                      <td>Double quote</td>
                   </tr>
                   <tr>
                      <td>\'</td>
                      <td>Single quote</td>
                   </tr>
                   <tr>
                      <td>\\</td>
                      <td>backslash</td>
                   </tr>
                   <tr>
                      <td>\ddd</td>
                      <td>Octal character (ddd)</td>
                   </tr>
                  <tr>
                      <td>\UXXXX</td>
                      <td>Hexadecimal UNICODE character (XXXX)</td>
                   </tr>
                   </tbody>
                </table>


                <h2>What is Next?</h2>
                <p>This chapter explained the various data types. The next topic explains different variable types and their usage. This will give you a good understanding on how they can be used in the Java classes, interfaces, etc.</p>
            </body>
        </html>
    ]]></string>

    <string name="java_variable_types"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable\'s memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.</p>
                <p>You must declare all variables before they can be used. Following is the basic form of a variable declaration &minus;</p>
                <pre class="result notranslate">
                data type variable [ = value][, variable [ = value] …] ;
                </pre>
                <p>Here <i>data type</i> is one of Java\'s datatypes and <i>variable</i> is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.</p>
                <p>Following are valid examples of variable declaration and initialization in Java &minus;</p>
                <h2>Example</h2>
                <div align="justify">
                   <br>int a, b, c;         // Declares three ints, a, b, and c.
                   <br>int a = 10, b = 10;  // Example of initialization
                   <br>byte B = 22;         // initializes a byte type variable B.
                   <br>double pi = 3.14159; // declares and assigns a value of PI.
                   <br>char a = \'a\';        // the char variable a iis initialized with value \'a\'
                </div>
                <p>This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java &minus;</p>
                <ul class="list">
                   <li>Local variables</li>
                   <li>Instance variables</li>
                   <li>Class/Static variables</li>
                </ul>
                <h2>Local Variables</h2>
                <ul class="list">
                   <li>
                      <p>Local variables are declared in methods, constructors, or blocks.</p>
                   </li>
                   <li>
                      <p>Local variables are created when the method, constructor or block is entered and the variable will be destroyed once it exits the method, constructor, or block.</p>
                   </li>
                   <li>
                      <p>Access modifiers cannot be used for local variables.</p>
                   </li>
                   <li>
                      <p>Local variables are visible only within the declared method, constructor, or block.</p>
                   </li>
                   <li>
                      <p>Local variables are implemented at stack level internally.</p>
                   </li>
                   <li>
                      <p>There is no default value for local variables, so local variables should be declared and an initial value should be assigned before the first use.</p>
                   </li>
                </ul>
                <h3>Example</h3>
                <p>Here, <i>age</i> is a local variable. This is defined inside <i>pupAge()</i> method and its scope is limited to only this method.</p>
                <div align="justify">
                   <font color="blue">
                   <br>public class Test {
                   <br>  public void pupAge() {
                   <br>     int age = 0;
                   <br>      age = age + 7;
                   <br>      System.out.println("Puppy age is : " + age);
                   <br>  }
                   <br>
                   <br>  public static void main(String args[]) {
                   <br>     Test test = new Test();
                   <br>     test.pupAge();
                   <br>  }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Puppy age is: 7
                </pre>
                <h3>Example</h3>
                <p>Following example uses <i>age</i> without initializing it, so it would give an error at the time of compilation.</p>
                <div align="justify">
                   <font color="blue">
                   <br>public class Test {
                   <br>   public void pupAge() {
                   <br>      int age;
                   <br>      age = age + 7;
                   <br>      System.out.println("Puppy age is : " + age);
                   <br>   }
                   <br>
                   <br>   public static void main(String args[]) {
                   <br>      Test test = new Test();
                   <br>      test.pupAge();
                   <br>   }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following error while compiling it &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Test.java:4:variable number might not have been initialized
                <br>age = age + 7;
                <br>         ^
                <br>1 error
                </pre>
                <h2>Instance Variables</h2>
                <ul class="list">
                   <li>
                      <p>Instance variables are declared in a class, but outside a method, constructor or any block.</p>
                   </li>
                   <li>
                      <p>When a space is allocated for an object in the heap, a slot for each instance variable value is created.</p>
                   </li>
                   <li>
                      <p>Instance variables are created when an object is created with the use of the keyword \'new\' and destroyed when the object is destroyed.</p>
                   </li>
                   <li>
                      <p>Instance variables hold values that must be referenced by more than one method, constructor or block, or essential parts of an object\'s state that must be present throughout the class.</p>
                   </li>
                   <li>
                      <p>Instance variables can be declared in class level before or after use.</p>
                   </li>
                   <li>
                      <p>Access modifiers can be given for instance variables.</p>
                   </li>
                   <li>
                      <p>The instance variables are visible for all methods, constructors and block in the class. Normally, it is recommended to make these variables private (access level). However, visibility for subclasses can be given for these variables with the use of access modifiers.</p>
                   </li>
                   <li>
                      <p>Instance variables have default values. For numbers, the default value is 0, for Booleans it is false, and for object references it is null. Values can be assigned during the declaration or within the constructor.</p>
                   </li>
                   <li>
                      <p>Instance variables can be accessed directly by calling the variable name inside the class. However, within static methods (when instance variables are given accessibility), they should be called using the fully qualified name. <i>ObjectReference.VariableName</i>.</p>
                   </li>
                </ul>
                <h3>Example</h3>
                <div align="justify">
                   <font color="blue">
                   <br>import java.io.*;
                   <br>public class Employee {
                   <br>
                   <br>   // this instance variable is visible for any child class.
                   <br>   public String name;
                   <br>
                   <br>   // salary  variable is visible in Employee class only.
                   <br>   private double salary;
                   <br>
                   <br>   // The name variable is assigned in the constructor.
                   <br>   public Employee (String empName) {
                   <br>      name = empName;
                   <br>   }
                   <br>
                   <br>   // The salary variable is assigned a value.
                   <br>   public void setSalary(double empSal) {
                   <br>      salary = empSal;
                   <br>   }
                   <br>
                   <br>   // This method prints the employee details.
                   <br>   public void printEmp() {
                   <br>      System.out.println("name  : " + name );
                   <br>      System.out.println("salary :" + salary);
                   <br>   }
                   <br>
                   <br>   public static void main(String args[]) {
                   <br>      Employee empOne = new Employee("Ransika");
                   <br>      empOne.setSalary(1000);
                   <br>      empOne.printEmp();
                   <br>   }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                name  : Ransika
                <br>salary :1000.0
                </pre>
                <h2>Class/Static Variables</h2>
                <ul class="list">
                   <li>
                      <p>Class variables also known as static variables are declared with the static keyword in a class, but outside a method, constructor or a block.</p>
                   </li>
                   <li>
                      <p>There would only be one copy of each class variable per class, regardless of how many objects are created from it.</p>
                   </li>
                   <li>
                      <p>Static variables are rarely used other than being declared as constants. Constants are variables that are declared as public/private, final, and static. Constant variables never change from their initial value.</p>
                   </li>
                   <li>
                      <p>Static variables are stored in the static memory. It is rare to use static variables other than declared final and used as either public or private constants.</p>
                   </li>
                   <li>
                      <p>Static variables are created when the program starts and destroyed when the program stops.</p>
                   </li>
                   <li>
                      <p>Visibility is similar to instance variables. However, most static variables are declared public since they must be available for users of the class.</p>
                   </li>
                   <li>
                      <p>Default values are same as instance variables. For numbers, the default value is 0; for Booleans, it is false; and for object references, it is null. Values can be assigned during the declaration or within the constructor. Additionally, values can be assigned in special static initializer blocks.</p>
                   </li>
                   <li>
                      <p>Static variables can be accessed by calling with the class name <i>ClassName.VariableName</i>.</p>
                   </li>
                   <li>
                      <p>When declaring class variables as public static final, then variable names (constants) are all in upper case. If the static variables are not public and final, the naming syntax is the same as instance and local variables.</p>
                   </li>
                </ul>
                <h3>Example</h3>
                <div align="justify">
                   <font color="blue">
                   <br>import java.io.*;
                   <br>public class Employee {
                   <br>
                   <br>   // salary  variable is a private static variable
                   <br>   private static double salary;
                   <br>
                   <br>   // DEPARTMENT is a constant
                   <br>   public static final String DEPARTMENT = "Development ";
                   <br>
                   <br>   public static void main(String args[]) {
                   <br>      salary = 1000;
                   <br>      System.out.println(DEPARTMENT + "average salary:" + salary);
                   <br>   }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Development average salary:1000
                </pre>
                <p><b>Note</b> &minus; If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT</p>
                <h2>What is Next?</h2>
                <p>You already have used access modifiers (public &amp; private) in this chapter. The next chapter will explain Access Modifiers and Non-Access Modifiers in detail.</p>
            </body>
        </html>
    ]]></string>
    <string name="java_modifier_types"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_basic_operators"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following &minus;</p>
                <ul class="list">
                   <li>
                      <p><a href="/java/java_access_modifiers.htm"> Java Access Modifiers</a></p>
                   </li>
                   <li>
                      <p><a href="/java/java_nonaccess_modifiers.htm">Non Access Modifiers</a></p>
                   </li>
                </ul>
                <p>To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example.</p>
                <h3>Example</h3>
                <div align="justify">
                   <font color="blue">
                   <br><i>public</i> class className {
                   <br>  <br> // …
                   <br>}
                   <br>
                   <br><i>private</i> boolean myFlag;
                   <br><i>static final</i> double weeks = 9.5;
                   <br><i>protected static final</i> int BOXWIDTH = 42;
                   <br>
                   <br><i>public static</i> void main(String[] arguments) {
                   <br> // body of method
                   <br>}
                   </font>
                </div>
                <h2>Access Control Modifiers</h2>
                <p>Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are &minus;</p>
                <ul class="list">
                   <li>Visible to the package, the default. No modifiers are needed.</li>
                   <li>Visible to the class only (private).</li>
                   <li>Visible to the world (public).</li>
                   <li>Visible to the package and all subclasses (protected).</li>
                </ul>
                <h2>Non-Access Modifiers</h2>
                <p>Java provides a number of non-access modifiers to achieve many other functionality.</p>
                <ul class="list">
                   <li>
                      <p>The <i>static</i> modifier for creating class methods and variables.</p>
                   </li>
                   <li>
                      <p>The <i>final</i> modifier for finalizing the implementations of classes, methods, and variables.</p>
                   </li>
                   <li>
                      <p>The <i>abstract</i> modifier for creating abstract classes and methods.</p>
                   </li>
                   <li>
                      <p>The <i>synchronized</i> and <i>volatile</i> modifiers, which are used for threads.</p>
                   </li>
                </ul>
                <h2>What is Next?</h2>
                <p>In the next section, we will be discussing about Basic Operators used in Java Language. The chapter will give you an overview of how these operators can be used during application development.</p>

            </body>
        </html>
    ]]></string>

    <string name="java_loop_control"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups &minus;</p>
                <ul class="list">
                   <li>Arithmetic Operators</li>
                   <li>Relational Operators</li>
                   <li>Bitwise Operators</li>
                   <li>Logical Operators</li>
                   <li>Assignment Operators</li>
                   <li>Misc Operators</li>
                </ul>
                <h2>The Arithmetic Operators</h2>
                <p>Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra. The following table lists the arithmetic operators &minus;</p>
                <p>Assume integer variable A holds 10 and variable B holds 20, then &minus;</p>
                <p><a href="/java/java_arithmatic_operators_examples.htm">Show Examples</a></p>
                <table>
                   <tr>
                      <th style="text-align:center;">Operator</th>
                      <th style="text-align:center;">Description</th>
                      <th style="text-align:center;">Example</th>
                   </tr>
                   <tr>
                      <td style="width:30%; text-align:center;vertical-align:middle">&plus; (Addition)</td>
                      <td style="width:40%;">Adds values on either side of the operator.</td>
                      <td style="text-align:center;vertical-align:middle">A &plus; B will give 30</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">- (Subtraction)</td>
                      <td>Subtracts right-hand operand from left-hand operand.</td>
                      <td style="text-align:center;vertical-align:middle">A - B will give -10</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&ast; (Multiplication)</td>
                      <td>Multiplies values on either side of the operator.</td>
                      <td style="text-align:center;vertical-align:middle">A &ast; B will give 200</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">/ (Division)</td>
                      <td>Divides left-hand operand by right-hand operand.</td>
                      <td style="text-align:center;vertical-align:middle">B / A will give 2</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">% (Modulus)</td>
                      <td>Divides left-hand operand by right-hand operand and returns remainder.</td>
                      <td style="text-align:center;vertical-align:middle">B % A will give 0</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&plus;&plus; (Increment)</td>
                      <td>Increases the value of operand by 1.</td>
                      <td style="text-align:center;vertical-align:middle">B&plus;&plus; gives 21</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">— (Decrement)</td>
                      <td>Decreases the value of operand by 1.</td>
                      <td style="text-align:center;vertical-align:middle">B— gives 19</td>
                   </tr>
                </table>
                <h2>The Relational Operators</h2>
                <p>There are following relational operators supported by Java language.</p>
                <p>Assume variable A holds 10 and variable B holds 20, then &minus;</p>
                <p><a href="/java/java_relational_operators_examples.htm">Show Examples</a></p>
                <table>
                   <tr>
                      <th style="width:24%; text-align:center;">Operator</th>
                      <th style="width:48%; text-align:center;">Description</th>
                      <th style="width:28%; text-align:center;">Example</th>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">== (equal to)</td>
                      <td>Checks if the values of two operands are equal or not, if yes then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A == B) is not true.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">!= (not equal to)</td>
                      <td>Checks if the values of two operands are equal or not, if values are not equal then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A != B) is true.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&gt; (greater than)</td>
                      <td>Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A &gt; B) is not true.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&lt; (less than)</td>
                      <td>Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A &lt; B) is true.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&gt;= (greater than or equal to)</td>
                      <td>Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A &gt;= B) is not true.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&lt;= (less than or equal to)</td>
                      <td>Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A &lt;= B) is true.</td>
                   </tr>
                </table>
                <h2>The Bitwise Operators</h2>
                <p>Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.</p>
                <p>Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows &minus;</p>
                <p>a = 0011 1100</p>
                <p>b = 0000 1101</p>
                <p>-----------------</p>
                <p>a&amp;b = 0000 1100</p>
                <p>a|b = 0011 1101</p>
                <p>a&#94;b = 0011 0001</p>
                <p>~a&nbsp; = 1100 0011</p>
                <p>The following table lists the bitwise operators &minus;</p>
                <p>Assume integer variable A holds 60 and variable B holds 13 then &minus;</p>
                <p><a href="/java/java_bitwise_operators_examples.htm">Show Examples</a></p>
                <table>
                   <tr>
                      <th style="text-align:center;">Operator</th>
                      <th style="text-align:center;">Description</th>
                      <th style="text-align:center;">Example</th>
                   </tr>
                   <tr>
                      <td style="width:25%;text-align:center;vertical-align:middle">&amp; (bitwise and)</td>
                      <td style="width:45%;vertical-align:middle">Binary AND Operator copies a bit to the result if it exists in both operands.</td>
                      <td style="width:35%;text-align:center; vertical-align:middle">(A &amp; B) will give 12 which is 0000 1100</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">| (bitwise or)</td>
                      <td style="vertical-align:middle;">Binary OR Operator copies a bit if it exists in either operand.</td>
                      <td style="text-align:center;vertical-align:middle">(A | B) will give 61 which is 0011 1101</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&#94; (bitwise XOR)</td>
                      <td style="vertical-align:middle;">Binary XOR Operator copies the bit if it is set in one operand but not both.</td>
                      <td style="text-align:center;vertical-align:middle">(A &#94; B) will give 49 which is 0011 0001</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">~ (bitwise compliment)</td>
                      <td style="vertical-align:middle;">Binary Ones Complement Operator is unary and has the effect of \'flipping\' bits.</td>
                      <td style="text-align:center;vertical-align:middle">(~A ) will give -61 which is 1100 0011 in 2\'s complement form due to a signed binary number.</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&lt;&lt; (left shift)</td>
                      <td style="vertical-align:middle;">Binary Left Shift Operator. The left operands value is moved left by the number of bits specified by the right operand.</td>
                      <td style="text-align:center;vertical-align:middle">A &lt;&lt; 2 will give 240 which is 1111 0000</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&gt;&gt; (right shift)</td>
                      <td>Binary Right Shift Operator. The left operands value is moved right by the number of bits specified by the right operand.</td>
                      <td style="text-align:center;vertical-align:middle">A &gt;&gt; 2 will give 15 which is 1111</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&gt;&gt;&gt; (zero fill right shift)</td>
                      <td>Shift right zero fill operator. The left operands value is moved right by the number of bits specified by the right operand and shifted values are filled up with zeros.</td>
                      <td style="text-align:center;vertical-align:middle">A &gt;&gt;&gt;2 will give 15 which is 0000 1111</td>
                   </tr>
                </table>
                <h2>The Logical Operators</h2>
                <p>The following table lists the logical operators &minus;</p>
                <p>Assume Boolean variables A holds true and variable B holds false, then &minus;</p>
                <p><a href="/java/java_logical_operators_examples.htm">Show Examples</a></p>
                <table>
                   <tr>
                      <th style="text-align:center;width:23%;">Operator</th>
                      <th style="text-align:center;">Description</th>
                      <th style="text-align:center;width:24%">Example</th>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&amp;&amp; (logical and)</td>
                      <td>Called Logical AND operator. If both the operands are non-zero, then the condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A &amp;&amp; B) is false</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">|| (logical or)</td>
                      <td>Called Logical OR Operator. If any of the two operands are non-zero, then the condition becomes true.</td>
                      <td style="text-align:center;vertical-align:middle">(A || B) is true</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">! (logical not)</td>
                      <td>Called Logical NOT Operator. Use to reverses the logical state of its operand. If a condition is true then Logical NOT operator will make false.</td>
                      <td style="text-align:center;vertical-align:middle">!(A &amp;&amp; B) is true</td>
                   </tr>
                </table>
                <h2>The Assignment Operators</h2>
                <p>Following are the assignment operators supported by Java language &minus;</p>
                <p><a href="/java/java_assignment_operators_examples.htm">Show Examples</a></p>
                <table>
                   <tr>
                      <th style="text-align:center;">Operator</th>
                      <th style="text-align:center;width:50%">Description</th>
                      <th style="text-align:center;">Example</th>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">=</td>
                      <td>Simple assignment operator. Assigns values from right side operands to left side operand.</td>
                      <td style="text-align:center;vertical-align:middle">C = A &plus; B will assign value of A &plus; B into C</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&plus;=</td>
                      <td>Add AND assignment operator. It adds right operand to the left operand and assign the result to left operand.</td>
                      <td style="text-align:center;vertical-align:middle">C &plus;= A is equivalent to C = C &plus; A</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">-=</td>
                      <td>Subtract AND assignment operator. It subtracts right operand from the left operand and assign the result to left operand.</td>
                      <td style="text-align:center;vertical-align:middle">C -= A is equivalent to C = C – A</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&ast;=</td>
                      <td>Multiply AND assignment operator. It multiplies right operand with the left operand and assign the result to left operand.</td>
                      <td style="text-align:center;vertical-align:middle">C &ast;= A is equivalent to C = C &ast; A</td>
                   </tr>
                   <tr>
                      <td class="ts">/=</td>
                      <td>Divide AND assignment operator. It divides left operand with the right operand and assign the result to left operand.</td>
                      <td style="text-align:center;vertical-align:middle">C /= A is equivalent to C = C / A</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">%=</td>
                      <td>Modulus AND assignment operator. It takes modulus using two operands and assign the result to left operand.</td>
                      <td style="text-align:center;vertical-align:middle">C %= A is equivalent to C = C % A</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&lt;&lt;=</td>
                      <td style="vertical-align:middle;">Left shift AND assignment operator.</td>
                      <td style="text-align:center;vertical-align:middle">C &lt;&lt;= 2 is same as C = C &lt;&lt; 2</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&gt;&gt;=</td>
                      <td style="vertical-align:middle;">Right shift AND assignment operator.</td>
                      <td style="text-align:center;vertical-align:middle">C &gt;&gt;= 2 is same as C = C &gt;&gt; 2</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&amp;=</td>
                      <td style="vertical-align:middle;">Bitwise AND assignment operator.</td>
                      <td style="text-align:center;vertical-align:middle">C &amp;= 2 is same as C = C &amp; 2</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">&#94;=</td>
                      <td>bitwise exclusive OR and assignment operator.</td>
                      <td style="text-align:center;vertical-align:middle">C &#94;= 2 is same as C = C &#94; 2</td>
                   </tr>
                   <tr>
                      <td style="text-align:center;vertical-align:middle">|=</td>
                      <td>bitwise inclusive OR and assignment operator.</td>
                      <td style="text-align:center;vertical-align:middle">C |= 2 is same as C = C | 2</td>
                   </tr>
                </table>
                <h2>Miscellaneous Operators</h2>
                <p>There are few other operators supported by Java Language.</p>
                <h3>Conditional Operator ( ? : )</h3>
                <p>Conditional operator is also known as the <b>ternary operator</b>. This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide, which value should be assigned to the variable. The operator is written as &minus;</p>
                <pre class="result notranslate">
                variable x = (expression) ? value if true : value if false
                </pre>
                <p>Following is an example &minus;</p>
                <p><b>Example</b></p>
                <div align="justify">
                   <font color="blue">
                   <br>public class Test {
                   <br>
                   <br> public static void main(String args[]) {
                   <br>    int a, b;
                   <br>    a = 10;
                   <br>    b = (a == 1) ? 20: 30;
                   <br>    System.out.println( "Value of b is : " +  b );
                   <br>
                   <br>    b = (a == 10) ? 20: 30;
                   <br>    System.out.println( "Value of b is : " + b );
                   <br> }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <p><b>Output</b></p>
                <pre class="result notranslate">
                Value of b is : 30
                <br>Value of b is : 20
                </pre>
                <h3>instanceof Operator</h3>
                <p>This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as &minus;</p>
                <pre class="result notranslate">
                ( Object reference variable ) instanceof  (class/interface type)
                </pre>
                <p>If the object referred by the variable on the left side of the operator passes the IS-A check for the class/interface type on the right side, then the result will be true. Following is an example &minus;</p>
                <p><b>Example</b></p>
                <div align="justify">
                   <font color="blue">
                   public class Test {
                   <br>
                   <br> public static void main(String args[]) {
                   <br>
                   <br>    String name = "James";
                   <br>
                   <br>    // following will return true since name is type of String
                   <br>    boolean result = name instanceof String;
                   <br>    System.out.println( result );
                   <br> }
                   <br>}
                   </font>
                </div>
                </pre>
                <p>This will produce the following result &minus;</p>
                <p><b>Output</b></p>
                <pre class="result notranslate">
                true
                </pre>
                <p>This operator will still return true, if the object being compared is the assignment compatible with the type on the right. Following is one more example &minus;</p>
                <p><b>Example</b></p>
                <div align="justify">
                   <font color="blue">
                   <br>class Vehicle {}
                   <br>
                   <br>public class Car extends Vehicle {
                   <br>
                   <br>  public static void main(String args[]) {
                   <br>
                   <br>     Vehicle a = new Car();
                   <br>     boolean result =  a instanceof Car;
                   <br>     System.out.println( result );
                   <br>  }
                   <br>}
                   </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <p><b>Output</b></p>
                <pre class="result notranslate">
                true
                </pre>
                <h2>Precedence of Java Operators</h2>
                <p>Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator &minus;</p>
                <p>For example, x = 7 &plus; 3 &ast; 2; here x is assigned 13, not 20 because operator &ast; has higher precedence than &plus;, so it first gets multiplied with 3 &ast; 2 and then adds into 7.</p>
                <p>Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.</p>
                <table>
                   <tr>
                      <th style="text-align:center; width:20%;">Category</th>
                      <th style="text-align:center;">Operator</th>
                      <th style="text-align:center; width:20%;">Associativity</th><p>There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.</p>
                <p>Programming languages provide various control structures that allow for more complicated execution paths.</p>
                <p>A <b>loop</b> statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages &minus;</p>
                <img src="/java/images/loop_architecture.jpg" alt="Loop Architecture" />
                <p>Java programming language provides the following types of loop to handle looping requirements. Click the following links to check their detail.</p>
                <table>
                <tr>
                <th>Sr.No.</th>
                <th style="text-align:center;">Loop &amp; Description</th>
                </tr>
                <tr>
                <td class="ts">1</td>
                <td><a href="/java/java_while_loop.htm">while loop</a>
                <p>Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body.</p></td>
                </tr>
                <tr>
                <td class="ts">2</td>
                <td><a href="/java/java_for_loop.htm">for loop</a>
                <p>Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable.</p></td>
                </tr>
                <tr>
                <td class="ts">3</td>
                <td><a href="/java/java_do_while_loop.htm">do…while loop</a>
                <p>Like a while statement, except that it tests the condition at the end of the loop body.</p></td>
                </tr>
                </table>
                <h2>Loop Control Statements</h2>
                <p>Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.</p>
                <p>Java supports the following control statements. Click the following links to check their detail.</p>
                <table>
                <tr>
                <th>Sr.No.</th>
                <th style="text-align:center;">Control Statement &amp; Description</th>
                </tr>
                <tr>
                <td class="ts">1</td>
                <td><a href="/java/java_break_statement.htm">break statement</a>
                <p>Terminates the <b>loop</b> or <b>switch</b> statement and transfers execution to the statement immediately following the loop or switch.</p></td>
                </tr>
                <tr>
                <td class="ts">2</td>
                <td><a href="/java/java_continue_statement.htm">continue statement</a>
                <p>Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating.</p></td>
                </tr>
                </table>
                <h2>Enhanced for loop in Java</h2>
                <p>As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.</p>
                <h3>Syntax</h3>
                <p>Following is the syntax of enhanced for loop &minus;</p>
                <pre class="result notranslate">
                for(declaration : expression) {
                  <br> // Statements
                <br>}
                </pre>
                <ul class="list">
                <li><p><b>Declaration</b> &minus; The newly declared block variable, is of a type compatible with the elements of the array you are accessing. The variable will be available within the for block and its value would be the same as the current array element.</p></li>
                <li><p><b>Expression</b> &minus; This evaluates to the array you need to loop through. The expression can be an array variable or method call that returns an array.</p></li>
                </ul>
                <h3>Example</h3>
                <div align="justify">
                                        <font color="blue">
                <br>public class Test {
                <br>
                   <br>public static void main(String args[]) {
                      <br>int [] numbers = {10, 20, 30, 40, 50};
                <br>
                    <br>  for(int x : numbers ) {
                        <br> System.out.print( x );
                        <br> System.out.print(",");
                      <br>}
                      <br>System.out.print("\n");
                      <br>String [] names = {"James", "Larry", "Tom", "Lacy"};
                <br>
                    <br>  for( String name : names ) {
                        <br> System.out.print( name );
                         <br>System.out.print(",");
                      <br>}
                   <br>}
                <br>}
                </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                10, 20, 30, 40, 50,
                <br>James, Larry, Tom, Lacy,
                </pre>
                <h2>What is Next?</h2>
                <p>In the following chapter, we will be learning about decision making statements in Java programming.</p>
                   </tr>
                   <tr>
                      <td>Postfix</td>
                      <td>expression++ expression--</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Unary</td>
                      <td>++expression –-expression +expression –expression ~ !</td>
                      <td>Right to left</td>
                   </tr>
                   <tr>
                      <td>Multiplicative</td>
                      <td>* / %</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Additive</td>
                      <td>+ -</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Shift</td>
                      <td><< >> >>></td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Relational</td>
                      <td>< >  <= >= instanceof</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Equality</td>
                      <td>== !=</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Bitwise AND</td>
                      <td>&</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Bitwise XOR</td>
                      <td>^</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Bitwise OR</td>
                      <td>|</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Logical AND</td>
                      <td>&&</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Logical OR</td>
                      <td>||</td>
                      <td>Left to right</td>
                   </tr>
                   <tr>
                      <td>Conditional</td>
                      <td>?:</td>
                      <td>Right to left</td>
                   </tr>
                   <tr>
                      <td>Assignment</td>
                      <td>= += -= *= /= %= ^= |= <<= >>= >>>=</td>
                      <td>Right to left</td>
                   </tr>
                </table>
                <h2>What is Next?</h2>
                <p>The next chapter will explain about loop control in Java programming. The chapter will describe various types of loops and how these loops can be used in Java program development and for what purposes they are being used.</p>
            </body>
        </html>
    ]]></string>
    <string name="java_decision_making" translatable="false"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.</p>
                <p>Following is the general form of a typical decision making structure found in most of the programming languages &minus;</p>
                <img src="https://www.tutorialspoint.com/java/images/decision_making.jpg" alt="Decision Making" />
                <p>Java programming language provides following types of decision making statements. Click the following links to check their detail.</p>
                <table>
                   <thead<tr>
                      <th>Sr.No.</th>
                      <th style="text-align:center;">Statement &amp; Description</th>
                   </tr>
                   </thead>
                   <tbody  align="center">
                   <tr>
                      <td class="ts">1</td>
                      <td>
                         <a href="/java/if_statement_in_java.htm">if statement</a>
                         <p>An <b>if statement</b> consists of a boolean expression followed by one or more statements.</p>
                      </td>
                   </tr>
                   <tr>
                      <td class="ts">2</td>
                      <td>
                         <a href="/java/if_else_statement_in_java.htm">if…else statement</a>
                         <p>An <b>if statement</b> can be followed by an optional <b>else statement</b>, which executes when the boolean expression is false.</p>
                      </td>
                   </tr>
                   <tr>
                      <td class="ts">3</td>
                      <td>
                         <a href="/java/nested_if_statements_in_java.htm">nested if statement</a>
                         <p>You can use one <b>if</b> or <b>else if</b> statement inside another <b>if</b> or <b>else if</b> statement(s).</p>
                      </td>
                   </tr>
                   <tr>
                      <td class="ts">4</td>
                      <td>
                         <a href="/java/switch_statement_in_java.htm">switch statement</a>
                         <p>A <b>switch</b> statement allows a variable to be tested for equality against a list of values.</p>
                      </td>
                   </tr>
                   </tbody>
                </table>
                <h2>The ? : Operator</h2>
                <p>We have covered <b>conditional operator ? :</b> in the previous chapter which can be used to replace <b>if…else</b> statements. It has the following general form &minus;</p>
                <pre class="result notranslate">
                Exp1 ? Exp2 : Exp3;
                </pre>
                <p>Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.</p>
                <p>To determine the value of the whole expression, initially exp1 is evaluated.</p>
                <ul class="list">
                   <li>
                      <p>If the value of exp1 is true, then the value of Exp2 will be the value of the whole expression.</p>
                   </li>
                   <li>
                      <p>If the value of exp1 is false, then Exp3 is evaluated and its value becomes the value of the entire expression.</p>
                   </li>
                </ul>
                <h2>What is Next?</h2>
                <p>In the next chapter, we will discuss about Number class (in the java.lang package) and its subclasses in Java Language.</p>
                <p>We will be looking into some of the situations where you will use instantiations of these classes rather than the primitive data types, as well as classes such as formatting, mathematical functions that you need to know about when working with Numbers.</p>
            </body>
        </html>
    ]]></string>

    <string name="java_numbers"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            <p>Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.</p>
            <h3>Example</h3>
            <pre >
            int i = 5000;
            float gpa = 13.65;
            double mask = 0xaf;
            </pre>
            <p>However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides <b>wrapper classes</b>.</p>
            <p>All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.</p>
            <img src="/java/images/number_classes.jpg" alt="Number Classes" />
            <p>The object of the wrapper class contains or wraps its respective primitive data type. Converting primitive data types into object is called <b>boxing</b>, and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.</p>
            <p>And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing. The <b>Number</b> class is part of the java.lang package.</p>
            <p>Following is an example of boxing and unboxing &minus;</p>
            <h3>Example</h3>

            <div align="justify">
                                    <font color="blue">
            <br>public class Test {
            <br>
            <br>   public static void main(String args[]) {
                  <br>Integer x = 5; // boxes int to an Integer object
                  <br>x =  x + 10;   // unboxes the Integer to a int
               <br>   System.out.println(x);
            <br>   }
            <br>}
            </font>
            </div>
            <p>This will produce the following result &minus;</p>
            <h3>Output</h3>
            <pre class="result notranslate">
            15
            </pre>
            <p>When x is assigned an integer value, the compiler boxes the integer because x is integer object. Later, x is unboxed so that they can be added as an integer.</p>
            <h2>Number Methods</h2>
            <p>Following is the list of the instance methods that all the subclasses of the Number class implements &minus;</p>
            <table>
            <tr>
            <th>Sr.No.</th>
            <th style="text-align:center;">Method &amp; Description</th>
            </tr>
            <tr>
            <td class="ts">1</td>
            <td><a href="/java/number_xxxvalue.htm">xxxValue()</a>
            <p>Converts the value of <i>this</i> Number object to the xxx data type and returns it.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">2</td>
            <td><a href="/java/number_compareto.htm">compareTo()</a>
            <p>Compares <i>this</i> Number object to the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">3</td>
            <td><a href="/java/number_equals.htm">equals()</a>
            <p>Determines whether <i>this</i> number object is equal to the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">4</td>
            <td><a href="/java/number_valueof.htm">valueOf()</a>
            <p>Returns an Integer object holding the value of the specified primitive.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">5</td>
            <td><a href="/java/number_tostring.htm">toString()</a>
            <p>Returns a String object representing the value of a specified int or Integer.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">6</td>
            <td><a href="/java/number_parseint.htm">parseInt()</a>
            <p>This method is used to get the primitive data type of a certain String.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">7</td>
            <td><a href="/java/number_abs.htm">abs()</a>
            <p>Returns the absolute value of the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">8</td>
            <td><a href="/java/number_ceil.htm">ceil()</a>
            <p>Returns the smallest integer that is greater than or equal to the argument. Returned as a double.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">9</td>
            <td><a href="/java/number_floor.htm">floor()</a>
            <p>Returns the largest integer that is less than or equal to the argument. Returned as a double.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">10</td>
            <td><a href="/java/number_rint.htm">rint()</a>
            <p>Returns the integer that is closest in value to the argument. Returned as a double.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">11</td>
            <td><a href="/java/number_round.htm">round()</a>
            <p>Returns the closest long or int, as indicated by the method's return type to the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">12</td>
            <td><a href="/java/number_min.htm">min()</a>
            <p>Returns the smaller of the two arguments.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">13</td>
            <td><a href="/java/number_max.htm">max()</a>
            <p>Returns the larger of the two arguments.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">14</td>
            <td><a href="/java/number_exp.htm">exp()</a>
            <p>Returns the base of the natural logarithms, e, to the power of the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">15</td>
            <td><a href="/java/number_log.htm">log()</a>
            <p>Returns the natural logarithm of the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">16</td>
            <td><a href="/java/number_pow.htm">pow()</a>
            <p>Returns the value of the first argument raised to the power of the second argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">17</td>
            <td><a href="/java/number_sqrt.htm">sqrt()</a>
            <p>Returns the square root of the argument.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">18</td>
            <td><a href="/java/number_sin.htm">sin()</a>
            <p>Returns the sine of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">19</td>
            <td><a href="/java/number_cos.htm">cos()</a>
            <p>Returns the cosine of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">20</td>
            <td><a href="/java/number_tan.htm">tan()</a>
            <p>Returns the tangent of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">21</td>
            <td><a href="/java/number_asin.htm">asin()</a>
            <p>Returns the arcsine of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">22</td>
            <td><a href="/java/number_acos.htm">acos()</a>
            <p>Returns the arccosine of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">23</td>
            <td><a href="/java/number_atan.htm">atan()</a>
            <p>Returns the arctangent of the specified double value.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">24</td>
            <td><a href="/java/number_atan2.htm">atan2()</a>
            <p>Converts rectangular coordinates (x, y) to polar coordinate (r, theta) and returns theta.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">25</td>
            <td><a href="/java/number_todegrees.htm">toDegrees()</a>
            <p>Converts the argument to degrees.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">26</td>
            <td><a href="/java/number_toradians.htm">toRadians()</a>
            <p>Converts the argument to radians.</p>
            </td>
            </tr>
            <tr>
            <td class="ts">27</td>
            <td><a href="/java/number_random.htm">random()</a>
            <p>Returns a random number.</p>
            </td>
            </tr>
            </table>
            <h2>What is Next?</h2>
            <p>In the next section, we will be going through the Character class in Java. You will be learning how to use object Characters and primitive data type char in Java.</p>
            </body>
        </html>
    ]]></string>
    <string name="java_characters" translatable="false"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
                <p>Normally, when we work with characters, we use primitive data  types char.</p>
                <h3>Example</h3>
                <div align="justify">
                    <font color="blue">
                        <br>char ch = \'a\';
                        <br>
                        <br>// Unicode for uppercase Greek omega character
                        <br>char uniChar = \'\u039A\';
                        <br>
                        <br>// an array of chars
                        <br>char[] charArray ={ \'a\', \'b\', \'c\', \'d\', \'e\' };
                    </font>
                </div>
                <p>However in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides wrapper class <b>Character</b> for primitive data type char.</p>
                <p>The Character class offers a number of useful class (i.e., static) methods for manipulating characters. You can create a Character object with the Character constructor &minus;</p>
                <pre class="result notranslate">
                Character ch = new Character(\'a\');
                </pre>
                <p>The Java compiler will also create a Character object for you under some circumstances. For example, if you pass a primitive char into a method that expects an object, the compiler automatically converts the char to a Character for you. This feature is called autoboxing or unboxing, if the conversion goes the other way.</p>
                <h3>Example</h3>
                <div align="justify">
                    <font color="blue">
                        <br>// Here following primitive char \'a\'
                        <br>// is boxed into the Character object ch
                        <br>Character ch = \'a\';
                        <br>
                        <br>// Here primitive \'x\' is boxed for method test,
                        <br>// return is unboxed to char \'c\'
                        <br>char c = test(\'x\');
                    </font>
                </div>
                <h2>Escape Sequences</h2>
                <p>A character preceded by a backslash (\) is an escape sequence and has a special meaning to the compiler.</p>
                <p>The newline character (\n) has been used frequently in this tutorial in System.out.println() statements to advance to the next line after the string is printed.</p>
                <p>Following table shows the Java escape sequences &minus;</p>
                <table>
                <tr>
                <th>Escape Sequence</th>
                <th style="text-align:center;">Description</th>
                </tr>
                <tr>
                <td style="text-align:center;">\t</td>
                <td>Inserts a tab in the text at this point.</td>
                </tr>
                <tr>
                <td style="text-align:center;">\b</td>
                <td>Inserts a backspace in the text at this point.</td>
                </tr>
                <tr>
                <td style="text-align:center;">\n</td>
                <td>Inserts a newline in the text at this point.</td>
                </tr>
                <tr>
                <td style="text-align:center;">\r</td>
                <td>Inserts a carriage return in the text at this point.</td>
                </tr>
                <tr>
                <td style="text-align:center;">\f</td>
                <td>Inserts a form feed in the text at this point.</td>
                </tr>
                <tr>
                <td class="ts">\'</td>
                <td>Inserts a single quote character in the text at this point.</td>
                </tr>
                <tr>
                <td class="ts">\"</td>
                <td>Inserts a double quote character in the text at this point.</td>
                </tr>
                <tr>
                <td class="ts">\\</td>
                <td>Inserts a backslash character in the text at this point.</td>
                </tr>
                </table>
                <p>When an escape sequence is encountered in a print statement, the compiler interprets it accordingly.</p>
                <h3>Example</h3>
                <p>If you want to put quotes within quotes, you must use the escape sequence, \", on the interior quotes &minus;</p>

                <div align="justify">
                                        <font color="blue">
                <br>public class Test {
                <br>
                   <br>public static void main(String args[]) {
                    <br>  System.out.println("She said \"Hello!\" to me.");
                  <br> }
                <br>}
                </font>
                </div>

                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                She said "Hello!" to me.
                </pre>
                <h2>Character Methods</h2>
                <p>Following is the list of the important instance methods that all the subclasses of the Character class implement &minus;</p>
                <table c>
                <tr>
                <th>Sr.No.</th>
                <th style="text-align:center;">Method &amp; Description</th>
                </tr>
                <tr>
                <td class="ts">1</td>
                <td><a href="/java/character_isletter.htm">isLetter()</a>
                <p>Determines whether the specified char value is a letter.</p></td>
                </tr>
                <tr>
                <td class="ts">2</td>
                <td><a href="/java/character_isdigit.htm">isDigit()</a>
                <p>Determines whether the specified char value is a digit.</p></td>
                </tr>
                <tr>
                <td class="ts">3</td>
                <td><a href="/java/character_iswhitespace.htm">isWhitespace()</a>
                <p>Determines whether the specified char value is white space.</p></td>
                </tr>
                <tr>
                <td class="ts">4</td>
                <td><a href="/java/character_isuppercase.htm">isUpperCase()</a>
                <p>Determines whether the specified char value is uppercase.</p></td>
                </tr>
                <tr>
                <td class="ts">5</td>
                <td><a href="/java/character_islowercase.htm">isLowerCase()</a>
                <p>Determines whether the specified char value is lowercase.</p></td>
                </tr>
                <tr>
                <td class="ts">6</td>
                <td><a href="/java/character_touppercase.htm">toUpperCase()</a>
                <p>Returns the uppercase form of the specified char value.</p></td>
                </tr>
                <tr>
                <td class="ts">7</td>
                <td><a href="/java/character_tolowercase.htm">toLowerCase()</a>
                <p>Returns the lowercase form of the specified char value.</p></td>
                </tr>
                <tr>
                <td class="ts">8</td>
                <td><a href="/java/character_tostring.htm">toString()</a>
                <p>Returns a String object representing the specified character value that is, a one-character string.</p></td>
                </tr>
                </table>
                <p>For a complete list of methods, please refer to the java.lang.Character API specification.</p>
                <h2>What is Next?</h2>
                <p>In the next section, we will be going through the String class in Java. You will be learning how to declare and use Strings efficiently as well as some of the important methods in the String class.</p>


                ## Java - Strings

                <p>Strings, which are widely used in Java programming, are a sequence of characters. In Java programming language, strings are treated as objects.</p>
                <p>The Java platform provides the String class to create and manipulate strings.</p>
                <h2>Creating Strings</h2>
                <p>The most direct way to create a string is to write &minus;</p>
                <pre class="result notranslate">
                String greeting = "Hello world!";
                </pre>
                <p>Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, "Hello world!\'.</p>
                <p>As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.</p>
                <h3>Example</h3>

                <pre >
                public class StringDemo {

                   public static void main(String args[]) {
                      char[] helloArray = { \'h\', \'e\', \'l\', \'l\', \'o\', \'.\' };
                      String helloString = new String(helloArray);
                      System.out.println( helloString );
                   }
                }
                </pre>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                hello.
                </pre>
                <p><b>Note</b> &minus; The String class is immutable, so that once it is created a String object cannot be changed. If there is a necessity to make a lot of modifications to Strings of characters, then you should use <a href="/java/java_string_buffer.htm">String Buffer &amp; String Builder</a> Classes.</p>
                <h2>String Length</h2>
                <p>Methods used to obtain information about an object are known as <b>accessor methods</b>. One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.</p>
                <p>The following program is an example of <b>length()</b>, method String class.</p>
                <h3>Example</h3>

                <div align="justify">
                                        <font color="blue">
                <br>public class StringDemo {
                <br>
                   <br>public static void main(String args[]) {
                    <br>  String palindrome = "Dot saw I was Tod";
                    <br>  int len = palindrome.length();
                    <br>  System.out.println( "String Length is : " + len );
                  <br> }
                <br>}
                </font>
                </div>

                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                String Length is : 17
                </pre>
                <h2>Concatenating Strings</h2>
                <p>The String class includes a method for concatenating two strings &minus;</p>
                <pre class="result notranslate">
                string1.concat(string2);
                </pre>
                <p>This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in &minus;</p>
                <pre class="result notranslate">
                "My name is ".concat("Zara");
                </pre>
                <p>Strings are more commonly concatenated with the &plus; operator, as in &minus;</p>
                <pre class="result notranslate">
                "Hello," + " world" + "!"
                </pre>
                <p>which results in &minus;</p>
                <pre class="result notranslate">
                "Hello, world!"
                </pre>
                <p>Let us look at the following example &minus;</p>
                <h3>Example</h3>

                <div align="justify">
                                        <font color="blue">
                <br>public class StringDemo {
                <br>
                <br>  public static void main(String args[]) {
                <br>      String string1 = "saw I was ";
                <br>      System.out.println("Dot " + string1 + "Tod");
                <br>   }
                <br>}
                </font>
                </div>
                <p>This will produce the following result &minus;</p>
                <h3>Output</h3>
                <pre class="result notranslate">
                Dot saw I was Tod
                </pre>
                <h2>Creating Format Strings</h2>
                <p>You have printf() and format() methods to print output with formatted numbers. The String class has an equivalent class method, format(), that returns a String object rather than a PrintStream object.</p>
                <p>Using String\'s static format() method allows you to create a formatted string that you can reuse, as opposed to a one-time print statement. For example, instead of &minus;</p>
                <h3>Example</h3>
                <div align="justify">
                                        <font color="blue">
                <br>System.out.printf("The value of the float variable is " +
                  <br>                "%f, while the value of the integer " +
                  <br>                "variable is %d, and the string " +
                   <br>               "is %s", floatVar, intVar, stringVar);
                </font>
                </div>
                <p>You can write &minus;</p>
                <div align="justify">
                    <font color="blue">
                                            String fs;
                        <br>	fs = String.format("The value of the float variable is " +
                        <br>    "%f, while the value of the integer " +
                        <br>    "variable is %d, and the string " +
                        <br>    "is %s", floatVar, intVar, stringVar);
                        <br>	System.out.println(fs);
                     </font>
                </div>

                <h2>String Methods</h2>
                <p>Here is the list of methods supported by String class &minus;</p>
                <table>
                <tr>
                <th>Sr.No.</th>
                <th style="text-align:center;">Method &amp; Description</th>
                </tr>
                <tr>
                <td class="ts">1</td>
                <td><a href="/java/java_string_charat.htm">char  charAt(int index)</a>
                <p>Returns the character at the specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">2</td>
                <td><a href="/java/java_string_compareto.htm">int compareTo(Object o)</a>
                <p>Compares this String to another Object.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">3</td>
                <td><a href="/java/java_string_compareto_anotherstring.htm">int compareTo(String anotherString)</a>
                <p>Compares two strings lexicographically.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">4</td>
                <td><a href="/java/java_string_comparetoignorecase.htm">int compareToIgnoreCase(String str)</a>
                <p>Compares two strings lexicographically, ignoring case differences.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">5</td>
                <td><a href="/java/java_string_concat.htm">String concat(String str)</a>
                <p>Concatenates the specified string to the end of this string.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">6</td>
                <td><a href="/java/java_string_contentequals.htm">boolean contentEquals(StringBuffer sb)</a>
                <p>Returns true if and only if this String represents the same sequence of characters as the specified StringBuffer.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">7</td>
                <td><a href="/java/java_string_copyvalueof.htm">static String copyValueOf(char[] data)</a>
                <p>Returns a String that represents the character sequence in the array specified.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">8</td>
                <td><a href="/java/java_string_copyvalueof_dataoffsetcount.htm">static String copyValueOf(char[] data, int offset, int count)</a>
                <p>Returns a String that represents the character sequence in the array specified.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">9</td>
                <td><a href="/java/java_string_endswith.htm">boolean endsWith(String suffix)</a>
                <p>Tests if this string ends with the specified suffix.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">10</td>
                <td><a href="/java/java_string_equals.htm">boolean equals(Object anObject)</a>
                <p>Compares this string to the specified object.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">11</td>
                <td><a href="/java/java_string_equalsignorecase.htm">boolean equalsIgnoreCase(String anotherString)</a>
                <p>Compares this String to another String, ignoring case considerations.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">12</td>
                <td><a href="/java/java_string_getbytes.htm">byte getBytes()</a>
                <p>Encodes this String into a sequence of bytes using the platform\'s default charset, storing the result into a new byte array.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">13</td>
                <td><a href="/java/java_string_getbytes_charsetname.htm">byte[] getBytes(String charsetName)</a>
                <p>Encodes this String into a sequence of bytes using the named charset, storing the result into a new byte array.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">14</td>
                <td><a href="/java/java_string_getchars.htm">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)</a>
                <p>Copies characters from this string into the destination character array.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">15</td>
                <td><a href="/java/java_string_hashcode.htm">int hashCode()</a>
                <p>Returns a hash code for this string.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">16</td>
                <td><a href="/java/java_string_indexof.htm">int indexOf(int ch)</a>
                <p>Returns the index within this string of the first occurrence of the specified character.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">17</td>
                <td><a href="/java/java_string_indexof_fromindex.htm">int indexOf(int ch, int fromIndex)</a>
                <p>Returns the index within this string of the first occurrence of the specified character, starting the search at the specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">18</td>
                <td><a href="/java/java_string_indexof_str.htm">int indexOf(String str)</a>
                <p>Returns the index within this string of the first occurrence of the specified substring.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">19</td>
                <td><a href="/java/java_string_indexof_strfromindex.htm">int indexOf(String str, int fromIndex)</a>
                <p>Returns the index within this string of the first occurrence of the specified substring, starting at the specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">20</td>
                <td><a href="/java/java_string_intern.htm">String intern()</a>
                <p>Returns a canonical representation for the string object.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">21</td>
                <td><a href="/java/java_string_lastindexof.htm">int lastIndexOf(int ch)</a>
                <p>Returns the index within this string of the last occurrence of the specified character.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">22</td>
                <td><a href="/java/java_string_lastindexof_chfromindex.htm">int lastIndexOf(int ch, int fromIndex)</a>
                <p>Returns the index within this string of the last occurrence of the specified character, searching backward starting at the specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">23</td>
                <td><a href="/java/java_string_lastindexof_str.htm">int lastIndexOf(String str)</a>
                <p>Returns the index within this string of the rightmost occurrence of the specified substring.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">24</td>
                <td><a href="/java/java_string_lastindexof_fromindex.htm">int lastIndexOf(String str, int fromIndex)</a>
                <p>Returns the index within this string of the last occurrence of the specified substring, searching backward starting at the specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">25</td>
                <td><a href="/java/java_string_length.htm">int length()</a>
                <p>Returns the length of this string.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">26</td>
                <td><a href="/java/java_string_matches.htm">boolean matches(String regex)</a>
                <p>Tells whether or not this string matches the given regular expression.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">27</td>
                <td><a href="/java/java_string_regionmatches_ignorecase.htm">boolean regionMatches(boolean ignoreCase, int toffset, String other, int ooffset, int len) </a>
                <p>Tests if two string regions are equal.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">28</td>
                <td><a href="/java/java_string_regionmatches.htm">boolean regionMatches(int toffset, String other, int ooffset, int len)</a>
                <p>Tests if two string regions are equal.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">29</td>
                <td><a href="/java/java_string_replace.htm">String replace(char oldChar, char newChar)</a>
                <p>Returns a new string resulting from replacing all occurrences of oldChar in this string with newChar.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">30</td>
                <td><a href="/java/java_string_replaceall.htm">String replaceAll(String regex, String replacement</a>
                <p>Replaces each substring of this string that matches the given regular expression with the given replacement.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">31</td>
                <td><a href="/java/java_string_replacefirst.htm">String replaceFirst(String regex, String replacement)</a>
                <p>Replaces the first substring of this string that matches the given regular expression with the given replacement.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">32</td>
                <td><a href="/java/java_string_split.htm">String[] split(String regex)</a>
                <p>Splits this string around matches of the given regular expression.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">33</td>
                <td><a href="/java/java_string_split_regexlimit.htm">String[] split(String regex, int limit)</a>
                <p>Splits this string around matches of the given regular expression.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">34</td>
                <td><a href="/java/java_string_startswith.htm">boolean startsWith(String prefix)</a>
                <p>Tests if this string starts with the specified prefix.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">35</td>
                <td><a href="/java/java_string_startswith_prefixtoffset.htm">boolean startsWith(String prefix, int toffset)</a>
                <p>Tests if this string starts with the specified prefix beginning a specified index.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">36</td>
                <td><a href="/java/java_string_subsequence.htm">CharSequence subSequence(int beginIndex, int endIndex)</a>
                <p>Returns a new character sequence that is a subsequence of this sequence.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">37</td>
                <td><a href="/java/java_string_substring.htm">String substring(int beginIndex)</a>
                <p>Returns a new string that is a substring of this string.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">38</td>
                <td><a href="/java/java_string_substring_beginendindex.htm">String substring(int beginIndex, int endIndex)</a>
                <p>Returns a new string that is a substring of this string.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">39</td>
                <td><a href="/java/java_string_tochararray.htm">char[] toCharArray()</a>
                <p>Converts this string to a new character array.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">40</td>
                <td><a href="/java/java_string_tolowercase.htm">String toLowerCase()</a>
                <p>Converts all of the characters in this String to lower case using the rules of the default locale.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">41</td>
                <td><a href="/java/java_string_tolowercase_locale.htm">String toLowerCase(Locale locale)</a>
                <p>Converts all of the characters in this String to lower case using the rules of the given Locale.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">42</td>
                <td><a href="/java/java_string_tostring.htm">String toString()</a>
                <p>This object (which is already a string!) is itself returned.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">43</td>
                <td><a href="/java/java_string_touppercase.htm">String toUpperCase()</a>
                <p>Converts all of the characters in this String to upper case using the rules of the default locale.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">44</td>
                <td><a href="/java/java_string_touppercase_locale.htm">String toUpperCase(Locale locale)</a>
                <p>Converts all of the characters in this String to upper case using the rules of the given Locale.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">45</td>
                <td><a href="/java/java_string_trim.htm">String trim()</a>
                <p>Returns a copy of the string, with leading and trailing whitespace omitted.</p>
                </td>
                </tr>
                <tr>
                <td class="ts">46</td>
                <td><a href="/java/java_string_valueof.htm">static String valueOf(primitive data type x)</a>
                <p>Returns the string representation of the passed data type argument.</p>
                </td>
                </tr>
                </table>
            </body>
        </html>
    ]]></string>
    <string name="java_strings"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            <p>Java provides a data structure, the <b>array</b>, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>
            <p>Instead of declaring individual variables, such as number0, number1, …, and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and …, numbers[99] to represent individual variables.</p>
            <p>This tutorial introduces how to declare array variables, create arrays, and process arrays using indexed variables.</p>
            <h2>Declaring Array Variables</h2>
            <p>To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable &minus;</p>
            <h3>Syntax</h3>
            <pre class="result notranslate">
            dataType[] arrayRefVar;   // preferred way.
            or
            dataType arrayRefVar[];  // works but not preferred way.
            </pre>
            <p><b>Note</b> &minus; The style <b>dataType[] arrayRefVar</b> is preferred. The style <b>dataType arrayRefVar[]</b> comes from the C/C&plus;&plus; language and was adopted in Java to accommodate C/C&plus;&plus; programmers.</p>
            <h3>Example</h3>
            <p>The following code snippets are examples of this syntax &minus;</p>
            <pre >
            double[] myList;   // preferred way.
            or
            double myList[];   // works but not preferred way.
            </pre>
            <h2>Creating Arrays</h2>
            <p>You can create an array by using the new operator with the following syntax &minus;</p>
            <h3>Syntax</h3>
            <pre class="result notranslate">
            arrayRefVar = new dataType[arraySize];
            </pre>
            <p>The above statement does two things &minus;</p>
            <ul class="list">
            <li><p>It creates an array using new dataType[arraySize].</p></li>
            <li><p>It assigns the reference of the newly created array to the variable arrayRefVar.</p></li>
            </ul>
            <p>Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, as shown below &minus;</p>
            <pre class="result notranslate">
            dataType[] arrayRefVar = new dataType[arraySize];
            </pre>
            <p>Alternatively you can create arrays as follows &minus;</p>
            <pre class="result notranslate">
            dataType[] arrayRefVar = {value0, value1, …, valuek};
            </pre>
            <p>The array elements are accessed through the <b>index</b>. Array indices are 0-based; that is, they start from 0 to <b>arrayRefVar.length-1</b>.</p>
            <h3>Example</h3>
            <p>Following statement declares an array variable, myList, creates an array of 10 elements of double type and assigns its reference to myList &minus;</p>
            <pre >
            double[] myList = new double[10];
            </pre>
            <p>Following picture represents array myList. Here, myList holds ten double values and the indices are from 0 to 9.</p>
            <img src="/java/images/java_array.jpg" alt="Java Array" />
            <h2>Processing Arrays</h2>
            <p>When processing array elements, we often use either <b>for</b> loop or <b>foreach</b> loop because all of the elements in an array are of the same type and the size of the array is known.</p>
            <h3>Example</h3>
            <p>Here is a complete example showing how to create, initialize, and process arrays &minus;</p>

            <div align="justify">
                                    <font color="blue">
            <br>public class TestArray {
            <br>
             <br>  public static void main(String[] args) {
              <br>    double[] myList = {1.9, 2.9, 3.4, 3.5};
            <br>
             <br>     // Print all the array elements
              <br>    for (int i = 0; i &lt; myList.length; i++) {
              <br>       System.out.println(myList[i] + " ");
              <br>    }
              <br>
              <br>    // Summing all elements
              <br>    double total = 0;
              <br>    for (int i = 0; i &lt; myList.length; i++) {
              <br>       total += myList[i];
              <br>    }
              <br>    System.out.println("Total is " + total);
              <br>
              <br>    // Finding the largest element
              <br>    double max = myList[0];
              <br>    for (int i = 1; i &lt; myList.length; i++) {
              <br>       if (myList[i] &gt; max) max = myList[i];
              <br>    }
              <br>    System.out.println("Max is " + max);
               <br>}
            <br>}
            </font>
            </div>
            <p>This will produce the following result &minus;</p>
            <h3>Output</h3>
            <pre class="result notranslate">
            1.9
            <br>2.9
            <br>3.4
            <br>3.5
            <br>Total is 11.7
            <br>Max is 3.5
            </pre>
            <h2>The foreach Loops</h2>
            <p>JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially without using an index variable.</p>
            <h3>Example</h3>
            <p>The following code displays all the elements in the array myList &minus;</p>

            <div align="justify">
                <font color="blue">
            <br>public class TestArray {
            <br>
             <br>  public static void main(String[] args) {
             <br>     double[] myList = {1.9, 2.9, 3.4, 3.5};
            <br>
             <br>     // Print all the array elements
             <br>     for (double element: myList) {
             <br>        System.out.println(element);
             <br>     }
             <br>  }
            <br>}
            </font>
            </div>
            <p>This will produce the following result &minus;</p>
            <h3>Output</h3>
            <pre class="result notranslate">
            1.9
            <br>2.9
            <br>3.4
            <br>3.5
            </pre>
            <h2>Passing Arrays to Methods</h2>
            <p>Just as you can pass primitive type values to methods, you can also pass arrays to methods. For example, the following method displays the elements in an <b>int</b> array &minus;</p>
            <h3>Example</h3>
            <div align="justify">
              <font color="blue">
            <br>public static void printArray(int[] array) {
              <br> for (int i = 0; i &lt; array.length; i++) {
              <br>    System.out.print(array[i] + " ");
              <br> }
            <br>}
            </font>
            </div>
            <p>You can invoke it by passing an array. For example, the following statement invokes the printArray method to display 3, 1, 2, 6, 4, and 2 &minus;</p>
            <h3>Example</h3>
            <div align="justify">
                                    <font color="blue">
            printArray(new int[]{3, 1, 2, 6, 4, 2});
            </font>
            </div>
            <h2>Returning an Array from a Method</h2>
            <p>A method may also return an array. For example, the following method returns an array that is the reversal of another array &minus;</p>
            <h3>Example</h3>
            <div align="justify">
                                    <font color="blue">
            <br>public static int[] reverse(int[] list) {
             <br>  int[] result = new int[list.length];
            <br>
             <br>  for (int i = 0, j = result.length - 1; i &lt; list.length; i++, j—) {
             <br>     result[j] = list[i];
             <br>  }
               return result;
            <br>}
            </font>
            </div>
            <h2>The Arrays Class</h2>
            <p>The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types.</p>
            <table class="table table-bordered">
            <tr>
            <th>Sr.No.</th>
            <th style="text-align:center;">Method &amp; Description</th>
            </tr>
            <tr>
            <td class="ts">1</td>
            <td><p><b>public static int binarySearch(Object[] a, Object key)</b></p>
            <p>Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to making this call. This returns index of the search key, if it is contained in the list; otherwise, it returns ( – (insertion point &plus; 1)).</p>
            </td>
            </tr>
            <tr>
            <td class="ts">2</td>
            <td><p><b>public static boolean equals(long[] a, long[] a2)</b></p>
            <p>Returns true if the two specified arrays of longs are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal. This returns true if the two arrays are equal. Same method could be used by all other primitive data types (Byte, short, Int, etc.)</p>
            </td>
            </tr>
            <tr>
            <td class="ts">3</td>
            <td><p><b>public static void fill(int[] a, int val)</b></p>
            <p>Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other primitive data types (Byte, short, Int, etc.)</p>
            </td>
            </tr>
            <tr>
            <td class="ts">4</td>
            <td><p><b>public static void sort(Object[] a)</b></p>
            <p>Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. The same method could be used by all other primitive data types ( Byte, short, Int, etc.)</p>
            </td>
            </tr>
            </table>
            </body>
        </html>
    ]]></string>
    <string name="java_arrays"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            <p>Java provides a data structure, the <b>array</b>, which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.</p>
            <p>Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables.</p>
            <p>This tutorial introduces how to declare array variables, create arrays, and process arrays using indexed variables.</p>
            <h2>Declaring Array Variables</h2>
            <p>To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable &minus;</p>
            <h3>Syntax</h3>
            <pre class="result notranslate">
            dataType[] arrayRefVar;   // preferred way.
            or
            dataType arrayRefVar[];  // works but not preferred way.
            </pre>
            <p><b>Note</b> &minus; The style <b>dataType[] arrayRefVar</b> is preferred. The style <b>dataType arrayRefVar[]</b> comes from the C/C&plus;&plus; language and was adopted in Java to accommodate C/C&plus;&plus; programmers.</p>
            <h3>Example</h3>
            <p>The following code snippets are examples of this syntax &minus;</p>
            <pre >
            double[] myList;   // preferred way.
            or
            double myList[];   // works but not preferred way.
            </pre>
            <h2>Creating Arrays</h2>
            <p>You can create an array by using the new operator with the following syntax &minus;</p>
            <h3>Syntax</h3>
            <pre class="result notranslate">
            arrayRefVar = new dataType[arraySize];
            </pre>
            <p>The above statement does two things &minus;</p>
            <ul class="list">
            <li><p>It creates an array using new dataType[arraySize].</p></li>
            <li><p>It assigns the reference of the newly created array to the variable arrayRefVar.</p></li>
            </ul>
            <p>Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, as shown below &minus;</p>
            <pre class="result notranslate">
            dataType[] arrayRefVar = new dataType[arraySize];
            </pre>
            <p>Alternatively you can create arrays as follows &minus;</p>
            <pre class="result notranslate">
            dataType[] arrayRefVar = {value0, value1, ..., valuek};
            </pre>
            <p>The array elements are accessed through the <b>index</b>. Array indices are 0-based; that is, they start from 0 to <b>arrayRefVar.length-1</b>.</p>
            <h3>Example</h3>
            <p>Following statement declares an array variable, myList, creates an array of 10 elements of double type and assigns its reference to myList &minus;</p>
            <pre >
            double[] myList = new double[10];
            </pre>
            <p>Following picture represents array myList. Here, myList holds ten double values and the indices are from 0 to 9.</p>
            <img src="/java/images/java_array.jpg" alt="Java Array" />
            <h2>Processing Arrays</h2>
            <p>When processing array elements, we often use either <b>for</b> loop or <b>foreach</b> loop because all of the elements in an array are of the same type and the size of the array is known.</p>
            <h3>Example</h3>
            <p>Here is a complete example showing how to create, initialize, and process arrays &minus;</p>

            <div align="justify">
                                    <font color="blue">
            <br>public class TestArray {
            <br>
             <br>  public static void main(String[] args) {
              <br>    double[] myList = {1.9, 2.9, 3.4, 3.5};
            <br>
             <br>     // Print all the array elements
              <br>    for (int i = 0; i &lt; myList.length; i++) {
              <br>       System.out.println(myList[i] + " ");
              <br>    }
              <br>
              <br>    // Summing all elements
              <br>    double total = 0;
              <br>    for (int i = 0; i &lt; myList.length; i++) {
              <br>       total += myList[i];
              <br>    }
              <br>    System.out.println("Total is " + total);
              <br>
              <br>    // Finding the largest element
              <br>    double max = myList[0];
              <br>    for (int i = 1; i &lt; myList.length; i++) {
              <br>       if (myList[i] &gt; max) max = myList[i];
              <br>    }
              <br>    System.out.println("Max is " + max);
               <br>}
            <br>}
            </font>
            </div>
            <p>This will produce the following result &minus;</p>
            <h3>Output</h3>
            <pre class="result notranslate">
            1.9
            <br>2.9
            <br>3.4
            <br>3.5
            <br>Total is 11.7
            <br>Max is 3.5
            </pre>
            <h2>The foreach Loops</h2>
            <p>JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially without using an index variable.</p>
            <h3>Example</h3>
            <p>The following code displays all the elements in the array myList &minus;</p>

            <div align="justify">
                <font color="blue">
            <br>public class TestArray {
            <br>
             <br>  public static void main(String[] args) {
             <br>     double[] myList = {1.9, 2.9, 3.4, 3.5};
            <br>
             <br>     // Print all the array elements
             <br>     for (double element: myList) {
             <br>        System.out.println(element);
             <br>     }
             <br>  }
            <br>}
            </font>
            </div>
            <p>This will produce the following result &minus;</p>
            <h3>Output</h3>
            <pre class="result notranslate">
            1.9
            <br>2.9
            <br>3.4
            <br>3.5
            </pre>
            <h2>Passing Arrays to Methods</h2>
            <p>Just as you can pass primitive type values to methods, you can also pass arrays to methods. For example, the following method displays the elements in an <b>int</b> array &minus;</p>
            <h3>Example</h3>
            <div align="justify">
              <font color="blue">
            <br>public static void printArray(int[] array) {
              <br> for (int i = 0; i &lt; array.length; i++) {
              <br>    System.out.print(array[i] + " ");
              <br> }
            <br>}
            </font>
            </div>
            <p>You can invoke it by passing an array. For example, the following statement invokes the printArray method to display 3, 1, 2, 6, 4, and 2 &minus;</p>
            <h3>Example</h3>
            <div align="justify">
                                    <font color="blue">
            printArray(new int[]{3, 1, 2, 6, 4, 2});
            </font>
            </div>
            <h2>Returning an Array from a Method</h2>
            <p>A method may also return an array. For example, the following method returns an array that is the reversal of another array &minus;</p>
            <h3>Example</h3>
            <div align="justify">
                                    <font color="blue">
            <br>public static int[] reverse(int[] list) {
             <br>  int[] result = new int[list.length];
            <br>
             <br>  for (int i = 0, j = result.length - 1; i &lt; list.length; i++, j--) {
             <br>     result[j] = list[i];
             <br>  }
               return result;
            <br>}
            </font>
            </div>
            <h2>The Arrays Class</h2>
            <p>The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types.</p>
            <table class="table table-bordered">
            <tr>
            <th>Sr.No.</th>
            <th style="text-align:center;">Method &amp; Description</th>
            </tr>
            <tr>
            <td class="ts">1</td>
            <td><p><b>public static int binarySearch(Object[] a, Object key)</b></p>
            <p>Searches the specified array of Object ( Byte, Int , double, etc.) for the specified value using the binary search algorithm. The array must be sorted prior to making this call. This returns index of the search key, if it is contained in the list; otherwise, it returns ( – (insertion point &plus; 1)).</p>
            </td>
            </tr>
            <tr>
            <td class="ts">2</td>
            <td><p><b>public static boolean equals(long[] a, long[] a2)</b></p>
            <p>Returns true if the two specified arrays of longs are equal to one another. Two arrays are considered equal if both arrays contain the same number of elements, and all corresponding pairs of elements in the two arrays are equal. This returns true if the two arrays are equal. Same method could be used by all other primitive data types (Byte, short, Int, etc.)</p>
            </td>
            </tr>
            <tr>
            <td class="ts">3</td>
            <td><p><b>public static void fill(int[] a, int val)</b></p>
            <p>Assigns the specified int value to each element of the specified array of ints. The same method could be used by all other primitive data types (Byte, short, Int, etc.)</p>
            </td>
            </tr>
            <tr>
            <td class="ts">4</td>
            <td><p><b>public static void sort(Object[] a)</b></p>
            <p>Sorts the specified array of objects into an ascending order, according to the natural ordering of its elements. The same method could be used by all other primitive data types ( Byte, short, Int, etc.)</p>
            </td>
            </tr>
            </table>

            </body>
        </html>
    ]]></string>
    <string name="java_date_time"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_regular_expressions"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_methods"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_files_io"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_exceptions"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>
    <string name="java_innerclasses"><![CDATA[
        <html>
            <body bgcolor="#E6E6FA">
            </body>
        </html>
    ]]></string>

</resources>
